
tdse-tp0_04-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08003584  08003584  00004584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003760  08003760  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003760  08003760  00004760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003768  08003768  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003768  08003768  00004768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800376c  0800376c  0000476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003770  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  080037e0  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080037e0  000052d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000666d  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001380  00000000  00000000  0000b706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  0000ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a0  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cbe  00000000  00000000  0000d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a19  00000000  00000000  000241fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fd5  00000000  00000000  0002bc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adbec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002630  00000000  00000000  000adc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000b0260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800356c 	.word	0x0800356c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800356c 	.word	0x0800356c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	@ 0x38
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000162:	f001 fc3d 	bl	80019e0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fa07 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f81f 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f889 	bl	8000284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f85d 	bl	8000230 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hellow World!\n");
 8000176:	4809      	ldr	r0, [pc, #36]	@ (800019c <main+0x40>)
 8000178:	f001 fdda 	bl	8001d30 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Enter string:\n");
 800017c:	4808      	ldr	r0, [pc, #32]	@ (80001a0 <main+0x44>)
 800017e:	f001 fdd7 	bl	8001d30 <puts>
	  scanf("%s", s);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <main+0x48>)
 8000188:	f001 fdda 	bl	8001d40 <iscanf>
	  printf("\nReceived string: %s\n", s);
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	4619      	mov	r1, r3
 8000190:	4805      	ldr	r0, [pc, #20]	@ (80001a8 <main+0x4c>)
 8000192:	f001 fd65 	bl	8001c60 <iprintf>
	  printf("Enter string:\n");
 8000196:	bf00      	nop
 8000198:	e7f0      	b.n	800017c <main+0x20>
 800019a:	bf00      	nop
 800019c:	08003584 	.word	0x08003584
 80001a0:	08003594 	.word	0x08003594
 80001a4:	080035a4 	.word	0x080035a4
 80001a8:	080035a8 	.word	0x080035a8

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	@ 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	@ 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 feaa 	bl	8001f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001de:	2300      	movs	r3, #0
 80001e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fcf1 	bl	8000bd4 <HAL_RCC_OscConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001f8:	f000 f8b2 	bl	8000360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fc:	230f      	movs	r3, #15
 80001fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000200:	2302      	movs	r3, #2
 8000202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f000 ff5e 	bl	80010d8 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000222:	f000 f89d 	bl	8000360 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	@ 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000234:	4b11      	ldr	r3, [pc, #68]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 8000236:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <MX_USART2_UART_Init+0x50>)
 8000238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 800023c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000242:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800024e:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 8000256:	220c      	movs	r2, #12
 8000258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000266:	4805      	ldr	r0, [pc, #20]	@ (800027c <MX_USART2_UART_Init+0x4c>)
 8000268:	f001 f8c4 	bl	80013f4 <HAL_UART_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000272:	f000 f875 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000008c 	.word	0x2000008c
 8000280:	40004400 	.word	0x40004400

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000298:	4b2d      	ldr	r3, [pc, #180]	@ (8000350 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a2c      	ldr	r2, [pc, #176]	@ (8000350 <MX_GPIO_Init+0xcc>)
 800029e:	f043 0310 	orr.w	r3, r3, #16
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0310 	and.w	r3, r3, #16
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b27      	ldr	r3, [pc, #156]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a26      	ldr	r2, [pc, #152]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b24      	ldr	r3, [pc, #144]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0320 	and.w	r3, r3, #32
 80002c4:	60bb      	str	r3, [r7, #8]
 80002c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b21      	ldr	r3, [pc, #132]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a20      	ldr	r2, [pc, #128]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_GPIO_Init+0xcc>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2120      	movs	r1, #32
 80002fc:	4815      	ldr	r0, [pc, #84]	@ (8000354 <MX_GPIO_Init+0xd0>)
 80002fe:	f000 fc2f 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000308:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <MX_GPIO_Init+0xd4>)
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	4811      	ldr	r0, [pc, #68]	@ (800035c <MX_GPIO_Init+0xd8>)
 8000318:	f000 fa9e 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800031c:	2320      	movs	r3, #32
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	2301      	movs	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2302      	movs	r3, #2
 800032a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	4619      	mov	r1, r3
 8000332:	4808      	ldr	r0, [pc, #32]	@ (8000354 <MX_GPIO_Init+0xd0>)
 8000334:	f000 fa90 	bl	8000858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2100      	movs	r1, #0
 800033c:	2028      	movs	r0, #40	@ 0x28
 800033e:	f000 fa54 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000342:	2028      	movs	r0, #40	@ 0x28
 8000344:	f000 fa6d 	bl	8000822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000348:	bf00      	nop
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	40010800 	.word	0x40010800
 8000358:	10110000 	.word	0x10110000
 800035c:	40011000 	.word	0x40011000

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <Error_Handler+0x8>

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <HAL_MspInit+0x5c>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <HAL_MspInit+0x60>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <HAL_MspInit+0x60>)
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010000 	.word	0x40010000

080003d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a15      	ldr	r2, [pc, #84]	@ (8000440 <HAL_UART_MspInit+0x70>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d123      	bne.n	8000438 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <HAL_UART_MspInit+0x74>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	4a13      	ldr	r2, [pc, #76]	@ (8000444 <HAL_UART_MspInit+0x74>)
 80003f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003fa:	61d3      	str	r3, [r2, #28]
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <HAL_UART_MspInit+0x74>)
 80003fe:	69db      	ldr	r3, [r3, #28]
 8000400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <HAL_UART_MspInit+0x74>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <HAL_UART_MspInit+0x74>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <HAL_UART_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000420:	230c      	movs	r3, #12
 8000422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2302      	movs	r3, #2
 800042a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4805      	ldr	r0, [pc, #20]	@ (8000448 <HAL_UART_MspInit+0x78>)
 8000434:	f000 fa10 	bl	8000858 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40004400 	.word	0x40004400
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <NMI_Handler+0x4>

08000454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <MemManage_Handler+0x4>

08000464 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <UsageFault_Handler+0x4>

08000474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f8b2 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004ac:	f000 fb70 	bl	8000b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <_sbrk+0x5c>)
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <_sbrk+0x60>)
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d102      	bne.n	80004d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <_sbrk+0x64>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <_sbrk+0x68>)
 80004d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d207      	bcs.n	80004f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e4:	f001 fd64 	bl	8001fb0 <__errno>
 80004e8:	4603      	mov	r3, r0
 80004ea:	220c      	movs	r2, #12
 80004ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e009      	b.n	8000508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fa:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <_sbrk+0x64>)
 8000504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20005000 	.word	0x20005000
 8000514:	00000400 	.word	0x00000400
 8000518:	200000d4 	.word	0x200000d4
 800051c:	200002d8 	.word	0x200002d8

08000520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800052c:	f7ff fff8 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480b      	ldr	r0, [pc, #44]	@ (8000560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000532:	490c      	ldr	r1, [pc, #48]	@ (8000564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a09      	ldr	r2, [pc, #36]	@ (800056c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000548:	4c09      	ldr	r4, [pc, #36]	@ (8000570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000556:	f001 fd31 	bl	8001fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fdff 	bl	800015c <main>
  bx lr
 800055e:	4770      	bx	lr
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000568:	08003770 	.word	0x08003770
  ldr r2, =_sbss
 800056c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000570:	200002d4 	.word	0x200002d4

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_Init+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <HAL_Init+0x28>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f923 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f808 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000594:	f7ff feea 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <HAL_InitTick+0x54>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_InitTick+0x58>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f93b 	bl	800083e <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00e      	b.n	80005f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d80a      	bhi.n	80005ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 f903 	bl	80007ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_InitTick+0x5c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <HAL_IncTick+0x1c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <HAL_IncTick+0x20>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a03      	ldr	r2, [pc, #12]	@ (8000624 <HAL_IncTick+0x20>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	20000008 	.word	0x20000008
 8000624:	200000d8 	.word	0x200000d8

08000628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b02      	ldr	r3, [pc, #8]	@ (8000638 <HAL_GetTick+0x10>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	200000d8 	.word	0x200000d8

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0b      	blt.n	80006ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 021f 	and.w	r2, r3, #31
 80006b8:	4906      	ldr	r1, [pc, #24]	@ (80006d4 <__NVIC_EnableIRQ+0x34>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	@ (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	@ (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f7ff ff90 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff2d 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff42 	bl	8000684 <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff90 	bl	800072c <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5f 	bl	80006d8 <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff35 	bl	80006a0 <__NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffa2 	bl	8000790 <SysTick_Config>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	@ 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e169      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800086c:	2201      	movs	r2, #1
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8158 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a9a      	ldr	r2, [pc, #616]	@ (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d05e      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 8000894:	4a98      	ldr	r2, [pc, #608]	@ (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d875      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 800089a:	4a98      	ldr	r2, [pc, #608]	@ (8000afc <HAL_GPIO_Init+0x2a4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d058      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008a0:	4a96      	ldr	r2, [pc, #600]	@ (8000afc <HAL_GPIO_Init+0x2a4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d86f      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008a6:	4a96      	ldr	r2, [pc, #600]	@ (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d052      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008ac:	4a94      	ldr	r2, [pc, #592]	@ (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d869      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008b2:	4a94      	ldr	r2, [pc, #592]	@ (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d04c      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008b8:	4a92      	ldr	r2, [pc, #584]	@ (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d863      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008be:	4a92      	ldr	r2, [pc, #584]	@ (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d046      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008c4:	4a90      	ldr	r2, [pc, #576]	@ (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d85d      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d82a      	bhi.n	8000924 <HAL_GPIO_Init+0xcc>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d859      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008d2:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <HAL_GPIO_Init+0x80>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	08000953 	.word	0x08000953
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	0800093f 	.word	0x0800093f
 80008e4:	08000981 	.word	0x08000981
 80008e8:	08000987 	.word	0x08000987
 80008ec:	08000987 	.word	0x08000987
 80008f0:	08000987 	.word	0x08000987
 80008f4:	08000987 	.word	0x08000987
 80008f8:	08000987 	.word	0x08000987
 80008fc:	08000987 	.word	0x08000987
 8000900:	08000987 	.word	0x08000987
 8000904:	08000987 	.word	0x08000987
 8000908:	08000987 	.word	0x08000987
 800090c:	08000987 	.word	0x08000987
 8000910:	08000987 	.word	0x08000987
 8000914:	08000987 	.word	0x08000987
 8000918:	08000987 	.word	0x08000987
 800091c:	08000935 	.word	0x08000935
 8000920:	08000949 	.word	0x08000949
 8000924:	4a79      	ldr	r2, [pc, #484]	@ (8000b0c <HAL_GPIO_Init+0x2b4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d013      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092a:	e02c      	b.n	8000986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e029      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	3304      	adds	r3, #4
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e024      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	3308      	adds	r3, #8
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e01f      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	330c      	adds	r3, #12
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e01a      	b.n	8000988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095a:	2304      	movs	r3, #4
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e013      	b.n	8000988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d105      	bne.n	8000974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	611a      	str	r2, [r3, #16]
          break;
 8000972:	e009      	b.n	8000988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	615a      	str	r2, [r3, #20]
          break;
 800097e:	e003      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x130>
          break;
 8000986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2bff      	cmp	r3, #255	@ 0xff
 800098c:	d801      	bhi.n	8000992 <HAL_GPIO_Init+0x13a>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	e001      	b.n	8000996 <HAL_GPIO_Init+0x13e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3304      	adds	r3, #4
 8000996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2bff      	cmp	r3, #255	@ 0xff
 800099c:	d802      	bhi.n	80009a4 <HAL_GPIO_Init+0x14c>
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0x152>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a6:	3b08      	subs	r3, #8
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	6a39      	ldr	r1, [r7, #32]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80b1 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	@ (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f0:	4a48      	ldr	r2, [pc, #288]	@ (8000b14 <HAL_GPIO_Init+0x2bc>)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a40      	ldr	r2, [pc, #256]	@ (8000b18 <HAL_GPIO_Init+0x2c0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d013      	beq.n	8000a44 <HAL_GPIO_Init+0x1ec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b1c <HAL_GPIO_Init+0x2c4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1e8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3e      	ldr	r2, [pc, #248]	@ (8000b20 <HAL_GPIO_Init+0x2c8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1e4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b24 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1e0>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e006      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a44:	2300      	movs	r3, #0
 8000a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a56:	492f      	ldr	r1, [pc, #188]	@ (8000b14 <HAL_GPIO_Init+0x2bc>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a70:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	492c      	ldr	r1, [pc, #176]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4928      	ldr	r1, [pc, #160]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	4922      	ldr	r1, [pc, #136]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60cb      	str	r3, [r1, #12]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	491e      	ldr	r1, [pc, #120]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4918      	ldr	r1, [pc, #96]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4914      	ldr	r1, [pc, #80]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	490e      	ldr	r1, [pc, #56]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	600b      	str	r3, [r1, #0]
 8000af4:	e021      	b.n	8000b3a <HAL_GPIO_Init+0x2e2>
 8000af6:	bf00      	nop
 8000af8:	10320000 	.word	0x10320000
 8000afc:	10310000 	.word	0x10310000
 8000b00:	10220000 	.word	0x10220000
 8000b04:	10210000 	.word	0x10210000
 8000b08:	10120000 	.word	0x10120000
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40011400 	.word	0x40011400
 8000b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_GPIO_Init+0x304>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4909      	ldr	r1, [pc, #36]	@ (8000b5c <HAL_GPIO_Init+0x304>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f47f ae8e 	bne.w	800086c <HAL_GPIO_Init+0x14>
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	372c      	adds	r7, #44	@ 0x2c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f806 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e272      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8087 	beq.w	8000d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf4:	4b92      	ldr	r3, [pc, #584]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d00c      	beq.n	8000c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c00:	4b8f      	ldr	r3, [pc, #572]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d112      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5e>
 8000c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c18:	d10b      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1a:	4b89      	ldr	r3, [pc, #548]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d06c      	beq.n	8000d00 <HAL_RCC_OscConfig+0x12c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d168      	bne.n	8000d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e24c      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c3a:	d106      	bne.n	8000c4a <HAL_RCC_OscConfig+0x76>
 8000c3c:	4b80      	ldr	r3, [pc, #512]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a7f      	ldr	r2, [pc, #508]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e02e      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x98>
 8000c52:	4b7b      	ldr	r3, [pc, #492]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a7a      	ldr	r2, [pc, #488]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b78      	ldr	r3, [pc, #480]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a77      	ldr	r2, [pc, #476]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e01d      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0xbc>
 8000c76:	4b72      	ldr	r3, [pc, #456]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a71      	ldr	r2, [pc, #452]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b6f      	ldr	r3, [pc, #444]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a6e      	ldr	r2, [pc, #440]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e00b      	b.n	8000ca8 <HAL_RCC_OscConfig+0xd4>
 8000c90:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a6a      	ldr	r2, [pc, #424]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b68      	ldr	r3, [pc, #416]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a67      	ldr	r2, [pc, #412]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d013      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fcba 	bl	8000628 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fcb6 	bl	8000628 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	@ 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e200      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	4b5d      	ldr	r3, [pc, #372]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f0      	beq.n	8000cb8 <HAL_RCC_OscConfig+0xe4>
 8000cd6:	e014      	b.n	8000d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fca6 	bl	8000628 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fca2 	bl	8000628 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	@ 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e1ec      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	4b53      	ldr	r3, [pc, #332]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x10c>
 8000cfe:	e000      	b.n	8000d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d063      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00b      	beq.n	8000d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d1a:	4b49      	ldr	r3, [pc, #292]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d11c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x18c>
 8000d26:	4b46      	ldr	r3, [pc, #280]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d116      	bne.n	8000d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <HAL_RCC_OscConfig+0x176>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e1c0      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4939      	ldr	r1, [pc, #228]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	e03a      	b.n	8000dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d020      	beq.n	8000daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d68:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fc5b 	bl	8000628 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc57 	bl	8000628 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e1a1      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4927      	ldr	r1, [pc, #156]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000daa:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <HAL_RCC_OscConfig+0x270>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc3a 	bl	8000628 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc36 	bl	8000628 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e180      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d03a      	beq.n	8000e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d019      	beq.n	8000e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <HAL_RCC_OscConfig+0x274>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df0:	f7ff fc1a 	bl	8000628 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fc16 	bl	8000628 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e160      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 face 	bl	80013b8 <RCC_Delay>
 8000e1c:	e01c      	b.n	8000e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_RCC_OscConfig+0x274>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc00 	bl	8000628 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2a:	e00f      	b.n	8000e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fbfc 	bl	8000628 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d908      	bls.n	8000e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e146      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	42420000 	.word	0x42420000
 8000e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	4b92      	ldr	r3, [pc, #584]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1e9      	bne.n	8000e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a6 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b88      	ldr	r3, [pc, #544]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a87      	ldr	r2, [pc, #540]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b85      	ldr	r3, [pc, #532]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e92:	4b82      	ldr	r3, [pc, #520]	@ (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d118      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fbbd 	bl	8000628 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb2:	f7ff fbb9 	bl	8000628 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b64      	cmp	r3, #100	@ 0x64
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e103      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4b75      	ldr	r3, [pc, #468]	@ (800109c <HAL_RCC_OscConfig+0x4c8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x312>
 8000ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a6e      	ldr	r2, [pc, #440]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	e02d      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x334>
 8000eee:	4b6a      	ldr	r3, [pc, #424]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a69      	ldr	r2, [pc, #420]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	4b67      	ldr	r3, [pc, #412]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a66      	ldr	r2, [pc, #408]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	e01c      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d10c      	bne.n	8000f2a <HAL_RCC_OscConfig+0x356>
 8000f10:	4b61      	ldr	r3, [pc, #388]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a60      	ldr	r2, [pc, #384]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6213      	str	r3, [r2, #32]
 8000f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a5d      	ldr	r2, [pc, #372]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	e00b      	b.n	8000f42 <HAL_RCC_OscConfig+0x36e>
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	4b58      	ldr	r3, [pc, #352]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a57      	ldr	r2, [pc, #348]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f023 0304 	bic.w	r3, r3, #4
 8000f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d015      	beq.n	8000f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fb6d 	bl	8000628 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb69 	bl	8000628 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e0b1      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f68:	4b4b      	ldr	r3, [pc, #300]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0ee      	beq.n	8000f52 <HAL_RCC_OscConfig+0x37e>
 8000f74:	e014      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fb57 	bl	8000628 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	e00a      	b.n	8000f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fb53 	bl	8000628 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e09b      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f94:	4b40      	ldr	r3, [pc, #256]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1ee      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d105      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a3b      	ldr	r2, [pc, #236]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8087 	beq.w	80010ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fbc:	4b36      	ldr	r3, [pc, #216]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d061      	beq.n	800108c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d146      	bne.n	800105e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd0:	4b33      	ldr	r3, [pc, #204]	@ (80010a0 <HAL_RCC_OscConfig+0x4cc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fb27 	bl	8000628 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fde:	f7ff fb23 	bl	8000628 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e06d      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001004:	d108      	bne.n	8001018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4921      	ldr	r1, [pc, #132]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a19      	ldr	r1, [r3, #32]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001028:	430b      	orrs	r3, r1
 800102a:	491b      	ldr	r1, [pc, #108]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_RCC_OscConfig+0x4cc>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff faf7 	bl	8000628 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff faf3 	bl	8000628 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e03d      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x46a>
 800105c:	e035      	b.n	80010ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_RCC_OscConfig+0x4cc>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fae0 	bl	8000628 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fadc 	bl	8000628 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e026      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x498>
 800108a:	e01e      	b.n	80010ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d107      	bne.n	80010a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e019      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
 8001098:	40021000 	.word	0x40021000
 800109c:	40007000 	.word	0x40007000
 80010a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_RCC_OscConfig+0x500>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d0      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d910      	bls.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b67      	ldr	r3, [pc, #412]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4965      	ldr	r1, [pc, #404]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b63      	ldr	r3, [pc, #396]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b8      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001134:	4b59      	ldr	r3, [pc, #356]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a58      	ldr	r2, [pc, #352]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800113e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	4b53      	ldr	r3, [pc, #332]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a52      	ldr	r2, [pc, #328]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	4b50      	ldr	r3, [pc, #320]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	494d      	ldr	r1, [pc, #308]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d040      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d115      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07f      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b41      	ldr	r3, [pc, #260]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e073      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06b      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b39      	ldr	r3, [pc, #228]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4936      	ldr	r1, [pc, #216]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fa2e 	bl	8000628 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fa2a 	bl	8000628 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e053      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d210      	bcs.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 0207 	bic.w	r2, r3, #7
 800120e:	4922      	ldr	r1, [pc, #136]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e032      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4916      	ldr	r1, [pc, #88]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	490e      	ldr	r1, [pc, #56]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001266:	f000 f821 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 800126a:	4602      	mov	r2, r0
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	@ (80012a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f98c 	bl	80005a4 <HAL_InitTick>

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000
 800129c:	40021000 	.word	0x40021000
 80012a0:	080035cc 	.word	0x080035cc
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x30>
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d003      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x36>
 80012da:	e027      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 80012de:	613b      	str	r3, [r7, #16]
      break;
 80012e0:	e027      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_RCC_GetSysClockFreq+0x94>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	4a11      	ldr	r2, [pc, #68]	@ (800134c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	fb03 f202 	mul.w	r2, r3, r2
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	fbb2 f3f3 	udiv	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e004      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	613b      	str	r3, [r7, #16]
      break;
 800132a:	e002      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 800132e:	613b      	str	r3, [r7, #16]
      break;
 8001330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001332:	693b      	ldr	r3, [r7, #16]
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	007a1200 	.word	0x007a1200
 8001348:	080035e4 	.word	0x080035e4
 800134c:	080035f4 	.word	0x080035f4
 8001350:	003d0900 	.word	0x003d0900

08001354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001358:	4b02      	ldr	r3, [pc, #8]	@ (8001364 <HAL_RCC_GetHCLKFreq+0x10>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800136c:	f7ff fff2 	bl	8001354 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4903      	ldr	r1, [pc, #12]	@ (800138c <HAL_RCC_GetPCLK1Freq+0x24>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	080035dc 	.word	0x080035dc

08001390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001394:	f7ff ffde 	bl	8001354 <HAL_RCC_GetHCLKFreq>
 8001398:	4602      	mov	r2, r0
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	0adb      	lsrs	r3, r3, #11
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4903      	ldr	r1, [pc, #12]	@ (80013b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	080035dc 	.word	0x080035dc

080013b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <RCC_Delay+0x34>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <RCC_Delay+0x38>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0a5b      	lsrs	r3, r3, #9
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d4:	bf00      	nop
  }
  while (Delay --);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	60fa      	str	r2, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f9      	bne.n	80013d4 <RCC_Delay+0x1c>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000000 	.word	0x20000000
 80013f0:	10624dd3 	.word	0x10624dd3

080013f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e042      	b.n	800148c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7fe ffd8 	bl	80003d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2224      	movs	r2, #36	@ 0x24
 8001424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f82b 	bl	8001494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800144c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800145c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800146c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80014ce:	f023 030c 	bic.w	r3, r3, #12
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	430b      	orrs	r3, r1
 80014da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a2c      	ldr	r2, [pc, #176]	@ (80015a8 <UART_SetConfig+0x114>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d103      	bne.n	8001504 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014fc:	f7ff ff48 	bl	8001390 <HAL_RCC_GetPCLK2Freq>
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	e002      	b.n	800150a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001504:	f7ff ff30 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 8001508:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	009a      	lsls	r2, r3, #2
 8001514:	441a      	add	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <UART_SetConfig+0x118>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	0119      	lsls	r1, r3, #4
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009a      	lsls	r2, r3, #2
 8001534:	441a      	add	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <UART_SetConfig+0x118>)
 8001542:	fba3 0302 	umull	r0, r3, r3, r2
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	fb00 f303 	mul.w	r3, r0, r3
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	3332      	adds	r3, #50	@ 0x32
 8001554:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <UART_SetConfig+0x118>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001560:	4419      	add	r1, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009a      	lsls	r2, r3, #2
 800156c:	441a      	add	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fbb2 f2f3 	udiv	r2, r2, r3
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <UART_SetConfig+0x118>)
 800157a:	fba3 0302 	umull	r0, r3, r3, r2
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2064      	movs	r0, #100	@ 0x64
 8001582:	fb00 f303 	mul.w	r3, r0, r3
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	3332      	adds	r3, #50	@ 0x32
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <UART_SetConfig+0x118>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	f003 020f 	and.w	r2, r3, #15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	440a      	add	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40013800 	.word	0x40013800
 80015ac:	51eb851f 	.word	0x51eb851f

080015b0 <findslot>:
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <findslot+0x2c>)
 80015b2:	b510      	push	{r4, lr}
 80015b4:	4604      	mov	r4, r0
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	b118      	cbz	r0, 80015c2 <findslot+0x12>
 80015ba:	6a03      	ldr	r3, [r0, #32]
 80015bc:	b90b      	cbnz	r3, 80015c2 <findslot+0x12>
 80015be:	f000 fb19 	bl	8001bf4 <__sinit>
 80015c2:	2c13      	cmp	r4, #19
 80015c4:	d807      	bhi.n	80015d6 <findslot+0x26>
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <findslot+0x30>)
 80015c8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80015cc:	3201      	adds	r2, #1
 80015ce:	d002      	beq.n	80015d6 <findslot+0x26>
 80015d0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	2000      	movs	r0, #0
 80015d8:	e7fc      	b.n	80015d4 <findslot+0x24>
 80015da:	bf00      	nop
 80015dc:	20000020 	.word	0x20000020
 80015e0:	200000e8 	.word	0x200000e8

080015e4 <error>:
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e6:	4604      	mov	r4, r0
 80015e8:	f000 fce2 	bl	8001fb0 <__errno>
 80015ec:	2613      	movs	r6, #19
 80015ee:	4605      	mov	r5, r0
 80015f0:	2700      	movs	r7, #0
 80015f2:	4630      	mov	r0, r6
 80015f4:	4639      	mov	r1, r7
 80015f6:	beab      	bkpt	0x00ab
 80015f8:	4606      	mov	r6, r0
 80015fa:	4620      	mov	r0, r4
 80015fc:	602e      	str	r6, [r5, #0]
 80015fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001600 <checkerror>:
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	d101      	bne.n	8001608 <checkerror+0x8>
 8001604:	f7ff bfee 	b.w	80015e4 <error>
 8001608:	4770      	bx	lr

0800160a <_swiread>:
 800160a:	b530      	push	{r4, r5, lr}
 800160c:	b085      	sub	sp, #20
 800160e:	2406      	movs	r4, #6
 8001610:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001614:	9203      	str	r2, [sp, #12]
 8001616:	ad01      	add	r5, sp, #4
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	beab      	bkpt	0x00ab
 800161e:	4604      	mov	r4, r0
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff ffed 	bl	8001600 <checkerror>
 8001626:	b005      	add	sp, #20
 8001628:	bd30      	pop	{r4, r5, pc}

0800162a <_read>:
 800162a:	b570      	push	{r4, r5, r6, lr}
 800162c:	460e      	mov	r6, r1
 800162e:	4614      	mov	r4, r2
 8001630:	f7ff ffbe 	bl	80015b0 <findslot>
 8001634:	4605      	mov	r5, r0
 8001636:	b930      	cbnz	r0, 8001646 <_read+0x1c>
 8001638:	f000 fcba 	bl	8001fb0 <__errno>
 800163c:	2309      	movs	r3, #9
 800163e:	6003      	str	r3, [r0, #0]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	bd70      	pop	{r4, r5, r6, pc}
 8001646:	4622      	mov	r2, r4
 8001648:	4631      	mov	r1, r6
 800164a:	6800      	ldr	r0, [r0, #0]
 800164c:	f7ff ffdd 	bl	800160a <_swiread>
 8001650:	1c43      	adds	r3, r0, #1
 8001652:	d0f5      	beq.n	8001640 <_read+0x16>
 8001654:	686b      	ldr	r3, [r5, #4]
 8001656:	1a20      	subs	r0, r4, r0
 8001658:	4403      	add	r3, r0
 800165a:	606b      	str	r3, [r5, #4]
 800165c:	e7f2      	b.n	8001644 <_read+0x1a>

0800165e <_swilseek>:
 800165e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001660:	460c      	mov	r4, r1
 8001662:	4616      	mov	r6, r2
 8001664:	f7ff ffa4 	bl	80015b0 <findslot>
 8001668:	4605      	mov	r5, r0
 800166a:	b940      	cbnz	r0, 800167e <_swilseek+0x20>
 800166c:	f000 fca0 	bl	8001fb0 <__errno>
 8001670:	2309      	movs	r3, #9
 8001672:	6003      	str	r3, [r0, #0]
 8001674:	f04f 34ff 	mov.w	r4, #4294967295
 8001678:	4620      	mov	r0, r4
 800167a:	b003      	add	sp, #12
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167e:	2e02      	cmp	r6, #2
 8001680:	d903      	bls.n	800168a <_swilseek+0x2c>
 8001682:	f000 fc95 	bl	8001fb0 <__errno>
 8001686:	2316      	movs	r3, #22
 8001688:	e7f3      	b.n	8001672 <_swilseek+0x14>
 800168a:	2e01      	cmp	r6, #1
 800168c:	d112      	bne.n	80016b4 <_swilseek+0x56>
 800168e:	6843      	ldr	r3, [r0, #4]
 8001690:	18e4      	adds	r4, r4, r3
 8001692:	d4f6      	bmi.n	8001682 <_swilseek+0x24>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	260a      	movs	r6, #10
 8001698:	466f      	mov	r7, sp
 800169a:	e9cd 3400 	strd	r3, r4, [sp]
 800169e:	4630      	mov	r0, r6
 80016a0:	4639      	mov	r1, r7
 80016a2:	beab      	bkpt	0x00ab
 80016a4:	4606      	mov	r6, r0
 80016a6:	4630      	mov	r0, r6
 80016a8:	f7ff ffaa 	bl	8001600 <checkerror>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	dbe1      	blt.n	8001674 <_swilseek+0x16>
 80016b0:	606c      	str	r4, [r5, #4]
 80016b2:	e7e1      	b.n	8001678 <_swilseek+0x1a>
 80016b4:	2e02      	cmp	r6, #2
 80016b6:	6803      	ldr	r3, [r0, #0]
 80016b8:	d1ec      	bne.n	8001694 <_swilseek+0x36>
 80016ba:	260c      	movs	r6, #12
 80016bc:	466f      	mov	r7, sp
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4630      	mov	r0, r6
 80016c2:	4639      	mov	r1, r7
 80016c4:	beab      	bkpt	0x00ab
 80016c6:	4606      	mov	r6, r0
 80016c8:	4630      	mov	r0, r6
 80016ca:	f7ff ff99 	bl	8001600 <checkerror>
 80016ce:	1c43      	adds	r3, r0, #1
 80016d0:	d0d0      	beq.n	8001674 <_swilseek+0x16>
 80016d2:	4404      	add	r4, r0
 80016d4:	e7de      	b.n	8001694 <_swilseek+0x36>

080016d6 <_lseek>:
 80016d6:	f7ff bfc2 	b.w	800165e <_swilseek>

080016da <_swiwrite>:
 80016da:	b530      	push	{r4, r5, lr}
 80016dc:	b085      	sub	sp, #20
 80016de:	2405      	movs	r4, #5
 80016e0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80016e4:	9203      	str	r2, [sp, #12]
 80016e6:	ad01      	add	r5, sp, #4
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	beab      	bkpt	0x00ab
 80016ee:	4604      	mov	r4, r0
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7ff ff85 	bl	8001600 <checkerror>
 80016f6:	b005      	add	sp, #20
 80016f8:	bd30      	pop	{r4, r5, pc}

080016fa <_write>:
 80016fa:	b570      	push	{r4, r5, r6, lr}
 80016fc:	460e      	mov	r6, r1
 80016fe:	4615      	mov	r5, r2
 8001700:	f7ff ff56 	bl	80015b0 <findslot>
 8001704:	4604      	mov	r4, r0
 8001706:	b930      	cbnz	r0, 8001716 <_write+0x1c>
 8001708:	f000 fc52 	bl	8001fb0 <__errno>
 800170c:	2309      	movs	r3, #9
 800170e:	6003      	str	r3, [r0, #0]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	bd70      	pop	{r4, r5, r6, pc}
 8001716:	462a      	mov	r2, r5
 8001718:	4631      	mov	r1, r6
 800171a:	6800      	ldr	r0, [r0, #0]
 800171c:	f7ff ffdd 	bl	80016da <_swiwrite>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	dbf5      	blt.n	8001710 <_write+0x16>
 8001724:	6862      	ldr	r2, [r4, #4]
 8001726:	1ae8      	subs	r0, r5, r3
 8001728:	4402      	add	r2, r0
 800172a:	42ab      	cmp	r3, r5
 800172c:	6062      	str	r2, [r4, #4]
 800172e:	d1f1      	bne.n	8001714 <_write+0x1a>
 8001730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff bf55 	b.w	80015e4 <error>

0800173a <_swiclose>:
 800173a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800173c:	2402      	movs	r4, #2
 800173e:	9001      	str	r0, [sp, #4]
 8001740:	ad01      	add	r5, sp, #4
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	beab      	bkpt	0x00ab
 8001748:	4604      	mov	r4, r0
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff ff58 	bl	8001600 <checkerror>
 8001750:	b003      	add	sp, #12
 8001752:	bd30      	pop	{r4, r5, pc}

08001754 <_close>:
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4605      	mov	r5, r0
 8001758:	f7ff ff2a 	bl	80015b0 <findslot>
 800175c:	4604      	mov	r4, r0
 800175e:	b930      	cbnz	r0, 800176e <_close+0x1a>
 8001760:	f000 fc26 	bl	8001fb0 <__errno>
 8001764:	2309      	movs	r3, #9
 8001766:	6003      	str	r3, [r0, #0]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	bd38      	pop	{r3, r4, r5, pc}
 800176e:	3d01      	subs	r5, #1
 8001770:	2d01      	cmp	r5, #1
 8001772:	d809      	bhi.n	8001788 <_close+0x34>
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_close+0x40>)
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	429a      	cmp	r2, r3
 800177c:	d104      	bne.n	8001788 <_close+0x34>
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	2000      	movs	r0, #0
 8001784:	6023      	str	r3, [r4, #0]
 8001786:	e7f1      	b.n	800176c <_close+0x18>
 8001788:	6820      	ldr	r0, [r4, #0]
 800178a:	f7ff ffd6 	bl	800173a <_swiclose>
 800178e:	2800      	cmp	r0, #0
 8001790:	d0f5      	beq.n	800177e <_close+0x2a>
 8001792:	e7eb      	b.n	800176c <_close+0x18>
 8001794:	200000e8 	.word	0x200000e8

08001798 <_swistat>:
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	460c      	mov	r4, r1
 800179c:	f7ff ff08 	bl	80015b0 <findslot>
 80017a0:	4605      	mov	r5, r0
 80017a2:	b930      	cbnz	r0, 80017b2 <_swistat+0x1a>
 80017a4:	f000 fc04 	bl	8001fb0 <__errno>
 80017a8:	2309      	movs	r3, #9
 80017aa:	6003      	str	r3, [r0, #0]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	bd70      	pop	{r4, r5, r6, pc}
 80017b2:	6863      	ldr	r3, [r4, #4]
 80017b4:	260c      	movs	r6, #12
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017ba:	6063      	str	r3, [r4, #4]
 80017bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80017c2:	4630      	mov	r0, r6
 80017c4:	4629      	mov	r1, r5
 80017c6:	beab      	bkpt	0x00ab
 80017c8:	4605      	mov	r5, r0
 80017ca:	4628      	mov	r0, r5
 80017cc:	f7ff ff18 	bl	8001600 <checkerror>
 80017d0:	1c43      	adds	r3, r0, #1
 80017d2:	d0eb      	beq.n	80017ac <_swistat+0x14>
 80017d4:	6120      	str	r0, [r4, #16]
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7ea      	b.n	80017b0 <_swistat+0x18>

080017da <_fstat>:
 80017da:	460b      	mov	r3, r1
 80017dc:	b510      	push	{r4, lr}
 80017de:	2100      	movs	r1, #0
 80017e0:	4604      	mov	r4, r0
 80017e2:	2258      	movs	r2, #88	@ 0x58
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fb95 	bl	8001f14 <memset>
 80017ea:	4601      	mov	r1, r0
 80017ec:	4620      	mov	r0, r4
 80017ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017f2:	f7ff bfd1 	b.w	8001798 <_swistat>

080017f6 <_stat>:
 80017f6:	b538      	push	{r3, r4, r5, lr}
 80017f8:	460d      	mov	r5, r1
 80017fa:	4604      	mov	r4, r0
 80017fc:	2258      	movs	r2, #88	@ 0x58
 80017fe:	2100      	movs	r1, #0
 8001800:	4628      	mov	r0, r5
 8001802:	f000 fb87 	bl	8001f14 <memset>
 8001806:	4620      	mov	r0, r4
 8001808:	2100      	movs	r1, #0
 800180a:	f000 f811 	bl	8001830 <_swiopen>
 800180e:	1c43      	adds	r3, r0, #1
 8001810:	4604      	mov	r4, r0
 8001812:	d00b      	beq.n	800182c <_stat+0x36>
 8001814:	686b      	ldr	r3, [r5, #4]
 8001816:	4629      	mov	r1, r5
 8001818:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800181c:	606b      	str	r3, [r5, #4]
 800181e:	f7ff ffbb 	bl	8001798 <_swistat>
 8001822:	4605      	mov	r5, r0
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff ff95 	bl	8001754 <_close>
 800182a:	462c      	mov	r4, r5
 800182c:	4620      	mov	r0, r4
 800182e:	bd38      	pop	{r3, r4, r5, pc}

08001830 <_swiopen>:
 8001830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001834:	4682      	mov	sl, r0
 8001836:	460e      	mov	r6, r1
 8001838:	2400      	movs	r4, #0
 800183a:	4f28      	ldr	r7, [pc, #160]	@ (80018dc <_swiopen+0xac>)
 800183c:	b096      	sub	sp, #88	@ 0x58
 800183e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8001842:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8001846:	3301      	adds	r3, #1
 8001848:	d00c      	beq.n	8001864 <_swiopen+0x34>
 800184a:	3401      	adds	r4, #1
 800184c:	2c14      	cmp	r4, #20
 800184e:	d1f6      	bne.n	800183e <_swiopen+0xe>
 8001850:	f000 fbae 	bl	8001fb0 <__errno>
 8001854:	2318      	movs	r3, #24
 8001856:	f04f 34ff 	mov.w	r4, #4294967295
 800185a:	6003      	str	r3, [r0, #0]
 800185c:	4620      	mov	r0, r4
 800185e:	b016      	add	sp, #88	@ 0x58
 8001860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001864:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8001868:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800186c:	46e9      	mov	r9, sp
 800186e:	d109      	bne.n	8001884 <_swiopen+0x54>
 8001870:	4649      	mov	r1, r9
 8001872:	4650      	mov	r0, sl
 8001874:	f7ff ffbf 	bl	80017f6 <_stat>
 8001878:	3001      	adds	r0, #1
 800187a:	d003      	beq.n	8001884 <_swiopen+0x54>
 800187c:	f000 fb98 	bl	8001fb0 <__errno>
 8001880:	2311      	movs	r3, #17
 8001882:	e7e8      	b.n	8001856 <_swiopen+0x26>
 8001884:	f240 6301 	movw	r3, #1537	@ 0x601
 8001888:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800188c:	07b2      	lsls	r2, r6, #30
 800188e:	bf48      	it	mi
 8001890:	f045 0502 	orrmi.w	r5, r5, #2
 8001894:	421e      	tst	r6, r3
 8001896:	bf18      	it	ne
 8001898:	f045 0504 	orrne.w	r5, r5, #4
 800189c:	0733      	lsls	r3, r6, #28
 800189e:	bf48      	it	mi
 80018a0:	f025 0504 	bicmi.w	r5, r5, #4
 80018a4:	4650      	mov	r0, sl
 80018a6:	bf48      	it	mi
 80018a8:	f045 0508 	orrmi.w	r5, r5, #8
 80018ac:	f8cd a000 	str.w	sl, [sp]
 80018b0:	f7fe fc4c 	bl	800014c <strlen>
 80018b4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80018b8:	2501      	movs	r5, #1
 80018ba:	4628      	mov	r0, r5
 80018bc:	4649      	mov	r1, r9
 80018be:	beab      	bkpt	0x00ab
 80018c0:	4605      	mov	r5, r0
 80018c2:	2d00      	cmp	r5, #0
 80018c4:	db05      	blt.n	80018d2 <_swiopen+0xa2>
 80018c6:	2300      	movs	r3, #0
 80018c8:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80018cc:	4447      	add	r7, r8
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	e7c4      	b.n	800185c <_swiopen+0x2c>
 80018d2:	4628      	mov	r0, r5
 80018d4:	f7ff fe86 	bl	80015e4 <error>
 80018d8:	4604      	mov	r4, r0
 80018da:	e7bf      	b.n	800185c <_swiopen+0x2c>
 80018dc:	200000e8 	.word	0x200000e8

080018e0 <_get_semihosting_exts>:
 80018e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018e4:	4606      	mov	r6, r0
 80018e6:	460f      	mov	r7, r1
 80018e8:	4829      	ldr	r0, [pc, #164]	@ (8001990 <_get_semihosting_exts+0xb0>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4615      	mov	r5, r2
 80018ee:	f7ff ff9f 	bl	8001830 <_swiopen>
 80018f2:	4604      	mov	r4, r0
 80018f4:	462a      	mov	r2, r5
 80018f6:	2100      	movs	r1, #0
 80018f8:	4630      	mov	r0, r6
 80018fa:	f000 fb0b 	bl	8001f14 <memset>
 80018fe:	1c63      	adds	r3, r4, #1
 8001900:	d014      	beq.n	800192c <_get_semihosting_exts+0x4c>
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff fe54 	bl	80015b0 <findslot>
 8001908:	f04f 080c 	mov.w	r8, #12
 800190c:	4681      	mov	r9, r0
 800190e:	4640      	mov	r0, r8
 8001910:	4649      	mov	r1, r9
 8001912:	beab      	bkpt	0x00ab
 8001914:	4680      	mov	r8, r0
 8001916:	4640      	mov	r0, r8
 8001918:	f7ff fe72 	bl	8001600 <checkerror>
 800191c:	2803      	cmp	r0, #3
 800191e:	dd02      	ble.n	8001926 <_get_semihosting_exts+0x46>
 8001920:	1ec3      	subs	r3, r0, #3
 8001922:	42ab      	cmp	r3, r5
 8001924:	dc07      	bgt.n	8001936 <_get_semihosting_exts+0x56>
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff ff14 	bl	8001754 <_close>
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	b003      	add	sp, #12
 8001932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001936:	2204      	movs	r2, #4
 8001938:	4620      	mov	r0, r4
 800193a:	eb0d 0102 	add.w	r1, sp, r2
 800193e:	f7ff fe74 	bl	800162a <_read>
 8001942:	2803      	cmp	r0, #3
 8001944:	ddef      	ble.n	8001926 <_get_semihosting_exts+0x46>
 8001946:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800194a:	2b53      	cmp	r3, #83	@ 0x53
 800194c:	d1eb      	bne.n	8001926 <_get_semihosting_exts+0x46>
 800194e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001952:	2b48      	cmp	r3, #72	@ 0x48
 8001954:	d1e7      	bne.n	8001926 <_get_semihosting_exts+0x46>
 8001956:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800195a:	2b46      	cmp	r3, #70	@ 0x46
 800195c:	d1e3      	bne.n	8001926 <_get_semihosting_exts+0x46>
 800195e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001962:	2b42      	cmp	r3, #66	@ 0x42
 8001964:	d1df      	bne.n	8001926 <_get_semihosting_exts+0x46>
 8001966:	2201      	movs	r2, #1
 8001968:	4639      	mov	r1, r7
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fe77 	bl	800165e <_swilseek>
 8001970:	2800      	cmp	r0, #0
 8001972:	dbd8      	blt.n	8001926 <_get_semihosting_exts+0x46>
 8001974:	462a      	mov	r2, r5
 8001976:	4631      	mov	r1, r6
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff fe56 	bl	800162a <_read>
 800197e:	4605      	mov	r5, r0
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff fee7 	bl	8001754 <_close>
 8001986:	4628      	mov	r0, r5
 8001988:	f7ff fe3a 	bl	8001600 <checkerror>
 800198c:	e7d0      	b.n	8001930 <_get_semihosting_exts+0x50>
 800198e:	bf00      	nop
 8001990:	080035f6 	.word	0x080035f6

08001994 <initialise_semihosting_exts>:
 8001994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001996:	2100      	movs	r1, #0
 8001998:	2201      	movs	r2, #1
 800199a:	4d09      	ldr	r5, [pc, #36]	@ (80019c0 <initialise_semihosting_exts+0x2c>)
 800199c:	4c09      	ldr	r4, [pc, #36]	@ (80019c4 <initialise_semihosting_exts+0x30>)
 800199e:	a801      	add	r0, sp, #4
 80019a0:	6029      	str	r1, [r5, #0]
 80019a2:	6022      	str	r2, [r4, #0]
 80019a4:	f7ff ff9c 	bl	80018e0 <_get_semihosting_exts>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	dd07      	ble.n	80019bc <initialise_semihosting_exts+0x28>
 80019ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	602a      	str	r2, [r5, #0]
 80019ba:	6023      	str	r3, [r4, #0]
 80019bc:	b003      	add	sp, #12
 80019be:	bd30      	pop	{r4, r5, pc}
 80019c0:	20000010 	.word	0x20000010
 80019c4:	2000000c 	.word	0x2000000c

080019c8 <_has_ext_stdout_stderr>:
 80019c8:	b510      	push	{r4, lr}
 80019ca:	4c04      	ldr	r4, [pc, #16]	@ (80019dc <_has_ext_stdout_stderr+0x14>)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da01      	bge.n	80019d6 <_has_ext_stdout_stderr+0xe>
 80019d2:	f7ff ffdf 	bl	8001994 <initialise_semihosting_exts>
 80019d6:	6820      	ldr	r0, [r4, #0]
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <initialise_monitor_handles>:
 80019e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e4:	2303      	movs	r3, #3
 80019e6:	2400      	movs	r4, #0
 80019e8:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8001a8c <initialise_monitor_handles+0xac>
 80019ec:	b085      	sub	sp, #20
 80019ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80019f2:	af01      	add	r7, sp, #4
 80019f4:	9303      	str	r3, [sp, #12]
 80019f6:	2501      	movs	r5, #1
 80019f8:	9402      	str	r4, [sp, #8]
 80019fa:	4628      	mov	r0, r5
 80019fc:	4639      	mov	r1, r7
 80019fe:	beab      	bkpt	0x00ab
 8001a00:	4605      	mov	r5, r0
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8001a90 <initialise_monitor_handles+0xb0>
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	4c21      	ldr	r4, [pc, #132]	@ (8001a94 <initialise_monitor_handles+0xb4>)
 8001a0e:	f8c8 5000 	str.w	r5, [r8]
 8001a12:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001a16:	3301      	adds	r3, #1
 8001a18:	2b14      	cmp	r3, #20
 8001a1a:	d1fa      	bne.n	8001a12 <initialise_monitor_handles+0x32>
 8001a1c:	f7ff ffd4 	bl	80019c8 <_has_ext_stdout_stderr>
 8001a20:	4d1d      	ldr	r5, [pc, #116]	@ (8001a98 <initialise_monitor_handles+0xb8>)
 8001a22:	b1d0      	cbz	r0, 8001a5a <initialise_monitor_handles+0x7a>
 8001a24:	f04f 0a03 	mov.w	sl, #3
 8001a28:	2304      	movs	r3, #4
 8001a2a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a2e:	2601      	movs	r6, #1
 8001a30:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	4630      	mov	r0, r6
 8001a38:	4639      	mov	r1, r7
 8001a3a:	beab      	bkpt	0x00ab
 8001a3c:	4683      	mov	fp, r0
 8001a3e:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <initialise_monitor_handles+0xbc>)
 8001a40:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a44:	f8c3 b000 	str.w	fp, [r3]
 8001a48:	2308      	movs	r3, #8
 8001a4a:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	4630      	mov	r0, r6
 8001a52:	4639      	mov	r1, r7
 8001a54:	beab      	bkpt	0x00ab
 8001a56:	4606      	mov	r6, r0
 8001a58:	602e      	str	r6, [r5, #0]
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	6066      	str	r6, [r4, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	bf02      	ittt	eq
 8001a64:	4b0d      	ldreq	r3, [pc, #52]	@ (8001a9c <initialise_monitor_handles+0xbc>)
 8001a66:	681b      	ldreq	r3, [r3, #0]
 8001a68:	602b      	streq	r3, [r5, #0]
 8001a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a6e:	6023      	str	r3, [r4, #0]
 8001a70:	f7ff ffaa 	bl	80019c8 <_has_ext_stdout_stderr>
 8001a74:	b130      	cbz	r0, 8001a84 <initialise_monitor_handles+0xa4>
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <initialise_monitor_handles+0xbc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001a84:	b005      	add	sp, #20
 8001a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800360c 	.word	0x0800360c
 8001a90:	200000e4 	.word	0x200000e4
 8001a94:	200000e8 	.word	0x200000e8
 8001a98:	200000dc 	.word	0x200000dc
 8001a9c:	200000e0 	.word	0x200000e0

08001aa0 <_isatty>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	f7ff fd85 	bl	80015b0 <findslot>
 8001aa6:	2409      	movs	r4, #9
 8001aa8:	4605      	mov	r5, r0
 8001aaa:	b920      	cbnz	r0, 8001ab6 <_isatty+0x16>
 8001aac:	f000 fa80 	bl	8001fb0 <__errno>
 8001ab0:	6004      	str	r4, [r0, #0]
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	beab      	bkpt	0x00ab
 8001abc:	4604      	mov	r4, r0
 8001abe:	2c01      	cmp	r4, #1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	d0f7      	beq.n	8001ab4 <_isatty+0x14>
 8001ac4:	f000 fa74 	bl	8001fb0 <__errno>
 8001ac8:	2513      	movs	r5, #19
 8001aca:	4604      	mov	r4, r0
 8001acc:	2600      	movs	r6, #0
 8001ace:	4628      	mov	r0, r5
 8001ad0:	4631      	mov	r1, r6
 8001ad2:	beab      	bkpt	0x00ab
 8001ad4:	4605      	mov	r5, r0
 8001ad6:	6025      	str	r5, [r4, #0]
 8001ad8:	e7eb      	b.n	8001ab2 <_isatty+0x12>
	...

08001adc <std>:
 8001adc:	2300      	movs	r3, #0
 8001ade:	b510      	push	{r4, lr}
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aea:	6083      	str	r3, [r0, #8]
 8001aec:	8181      	strh	r1, [r0, #12]
 8001aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8001af0:	81c2      	strh	r2, [r0, #14]
 8001af2:	6183      	str	r3, [r0, #24]
 8001af4:	4619      	mov	r1, r3
 8001af6:	2208      	movs	r2, #8
 8001af8:	305c      	adds	r0, #92	@ 0x5c
 8001afa:	f000 fa0b 	bl	8001f14 <memset>
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <std+0x58>)
 8001b00:	6224      	str	r4, [r4, #32]
 8001b02:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <std+0x5c>)
 8001b06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <std+0x60>)
 8001b0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <std+0x64>)
 8001b0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <std+0x68>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d006      	beq.n	8001b24 <std+0x48>
 8001b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b1a:	4294      	cmp	r4, r2
 8001b1c:	d002      	beq.n	8001b24 <std+0x48>
 8001b1e:	33d0      	adds	r3, #208	@ 0xd0
 8001b20:	429c      	cmp	r4, r3
 8001b22:	d105      	bne.n	8001b30 <std+0x54>
 8001b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b2c:	f000 ba6a 	b.w	8002004 <__retarget_lock_init_recursive>
 8001b30:	bd10      	pop	{r4, pc}
 8001b32:	bf00      	nop
 8001b34:	08001d65 	.word	0x08001d65
 8001b38:	08001d87 	.word	0x08001d87
 8001b3c:	08001dbf 	.word	0x08001dbf
 8001b40:	08001de3 	.word	0x08001de3
 8001b44:	20000188 	.word	0x20000188

08001b48 <stdio_exit_handler>:
 8001b48:	4a02      	ldr	r2, [pc, #8]	@ (8001b54 <stdio_exit_handler+0xc>)
 8001b4a:	4903      	ldr	r1, [pc, #12]	@ (8001b58 <stdio_exit_handler+0x10>)
 8001b4c:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <stdio_exit_handler+0x14>)
 8001b4e:	f000 b869 	b.w	8001c24 <_fwalk_sglue>
 8001b52:	bf00      	nop
 8001b54:	20000014 	.word	0x20000014
 8001b58:	08002e95 	.word	0x08002e95
 8001b5c:	20000024 	.word	0x20000024

08001b60 <cleanup_stdio>:
 8001b60:	6841      	ldr	r1, [r0, #4]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <cleanup_stdio+0x34>)
 8001b64:	b510      	push	{r4, lr}
 8001b66:	4299      	cmp	r1, r3
 8001b68:	4604      	mov	r4, r0
 8001b6a:	d001      	beq.n	8001b70 <cleanup_stdio+0x10>
 8001b6c:	f001 f992 	bl	8002e94 <_fflush_r>
 8001b70:	68a1      	ldr	r1, [r4, #8]
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <cleanup_stdio+0x38>)
 8001b74:	4299      	cmp	r1, r3
 8001b76:	d002      	beq.n	8001b7e <cleanup_stdio+0x1e>
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f001 f98b 	bl	8002e94 <_fflush_r>
 8001b7e:	68e1      	ldr	r1, [r4, #12]
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <cleanup_stdio+0x3c>)
 8001b82:	4299      	cmp	r1, r3
 8001b84:	d004      	beq.n	8001b90 <cleanup_stdio+0x30>
 8001b86:	4620      	mov	r0, r4
 8001b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b8c:	f001 b982 	b.w	8002e94 <_fflush_r>
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	bf00      	nop
 8001b94:	20000188 	.word	0x20000188
 8001b98:	200001f0 	.word	0x200001f0
 8001b9c:	20000258 	.word	0x20000258

08001ba0 <global_stdio_init.part.0>:
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <global_stdio_init.part.0+0x30>)
 8001ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8001bd4 <global_stdio_init.part.0+0x34>)
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <global_stdio_init.part.0+0x38>)
 8001ba8:	4620      	mov	r0, r4
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	2104      	movs	r1, #4
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f7ff ff94 	bl	8001adc <std>
 8001bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2109      	movs	r1, #9
 8001bbc:	f7ff ff8e 	bl	8001adc <std>
 8001bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bca:	2112      	movs	r1, #18
 8001bcc:	f7ff bf86 	b.w	8001adc <std>
 8001bd0:	200002c0 	.word	0x200002c0
 8001bd4:	20000188 	.word	0x20000188
 8001bd8:	08001b49 	.word	0x08001b49

08001bdc <__sfp_lock_acquire>:
 8001bdc:	4801      	ldr	r0, [pc, #4]	@ (8001be4 <__sfp_lock_acquire+0x8>)
 8001bde:	f000 ba12 	b.w	8002006 <__retarget_lock_acquire_recursive>
 8001be2:	bf00      	nop
 8001be4:	200002c9 	.word	0x200002c9

08001be8 <__sfp_lock_release>:
 8001be8:	4801      	ldr	r0, [pc, #4]	@ (8001bf0 <__sfp_lock_release+0x8>)
 8001bea:	f000 ba0d 	b.w	8002008 <__retarget_lock_release_recursive>
 8001bee:	bf00      	nop
 8001bf0:	200002c9 	.word	0x200002c9

08001bf4 <__sinit>:
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	f7ff fff0 	bl	8001bdc <__sfp_lock_acquire>
 8001bfc:	6a23      	ldr	r3, [r4, #32]
 8001bfe:	b11b      	cbz	r3, 8001c08 <__sinit+0x14>
 8001c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c04:	f7ff bff0 	b.w	8001be8 <__sfp_lock_release>
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__sinit+0x28>)
 8001c0a:	6223      	str	r3, [r4, #32]
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__sinit+0x2c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f5      	bne.n	8001c00 <__sinit+0xc>
 8001c14:	f7ff ffc4 	bl	8001ba0 <global_stdio_init.part.0>
 8001c18:	e7f2      	b.n	8001c00 <__sinit+0xc>
 8001c1a:	bf00      	nop
 8001c1c:	08001b61 	.word	0x08001b61
 8001c20:	200002c0 	.word	0x200002c0

08001c24 <_fwalk_sglue>:
 8001c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c28:	4607      	mov	r7, r0
 8001c2a:	4688      	mov	r8, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	2600      	movs	r6, #0
 8001c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c34:	f1b9 0901 	subs.w	r9, r9, #1
 8001c38:	d505      	bpl.n	8001c46 <_fwalk_sglue+0x22>
 8001c3a:	6824      	ldr	r4, [r4, #0]
 8001c3c:	2c00      	cmp	r4, #0
 8001c3e:	d1f7      	bne.n	8001c30 <_fwalk_sglue+0xc>
 8001c40:	4630      	mov	r0, r6
 8001c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c46:	89ab      	ldrh	r3, [r5, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d907      	bls.n	8001c5c <_fwalk_sglue+0x38>
 8001c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c50:	3301      	adds	r3, #1
 8001c52:	d003      	beq.n	8001c5c <_fwalk_sglue+0x38>
 8001c54:	4629      	mov	r1, r5
 8001c56:	4638      	mov	r0, r7
 8001c58:	47c0      	blx	r8
 8001c5a:	4306      	orrs	r6, r0
 8001c5c:	3568      	adds	r5, #104	@ 0x68
 8001c5e:	e7e9      	b.n	8001c34 <_fwalk_sglue+0x10>

08001c60 <iprintf>:
 8001c60:	b40f      	push	{r0, r1, r2, r3}
 8001c62:	b507      	push	{r0, r1, r2, lr}
 8001c64:	4906      	ldr	r1, [pc, #24]	@ (8001c80 <iprintf+0x20>)
 8001c66:	ab04      	add	r3, sp, #16
 8001c68:	6808      	ldr	r0, [r1, #0]
 8001c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c6e:	6881      	ldr	r1, [r0, #8]
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f000 fae9 	bl	8002248 <_vfiprintf_r>
 8001c76:	b003      	add	sp, #12
 8001c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c7c:	b004      	add	sp, #16
 8001c7e:	4770      	bx	lr
 8001c80:	20000020 	.word	0x20000020

08001c84 <_puts_r>:
 8001c84:	6a03      	ldr	r3, [r0, #32]
 8001c86:	b570      	push	{r4, r5, r6, lr}
 8001c88:	4605      	mov	r5, r0
 8001c8a:	460e      	mov	r6, r1
 8001c8c:	6884      	ldr	r4, [r0, #8]
 8001c8e:	b90b      	cbnz	r3, 8001c94 <_puts_r+0x10>
 8001c90:	f7ff ffb0 	bl	8001bf4 <__sinit>
 8001c94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c96:	07db      	lsls	r3, r3, #31
 8001c98:	d405      	bmi.n	8001ca6 <_puts_r+0x22>
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	0598      	lsls	r0, r3, #22
 8001c9e:	d402      	bmi.n	8001ca6 <_puts_r+0x22>
 8001ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ca2:	f000 f9b0 	bl	8002006 <__retarget_lock_acquire_recursive>
 8001ca6:	89a3      	ldrh	r3, [r4, #12]
 8001ca8:	0719      	lsls	r1, r3, #28
 8001caa:	d502      	bpl.n	8001cb2 <_puts_r+0x2e>
 8001cac:	6923      	ldr	r3, [r4, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d135      	bne.n	8001d1e <_puts_r+0x9a>
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f000 f8d7 	bl	8001e68 <__swsetup_r>
 8001cba:	b380      	cbz	r0, 8001d1e <_puts_r+0x9a>
 8001cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8001cc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cc2:	07da      	lsls	r2, r3, #31
 8001cc4:	d405      	bmi.n	8001cd2 <_puts_r+0x4e>
 8001cc6:	89a3      	ldrh	r3, [r4, #12]
 8001cc8:	059b      	lsls	r3, r3, #22
 8001cca:	d402      	bmi.n	8001cd2 <_puts_r+0x4e>
 8001ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cce:	f000 f99b 	bl	8002008 <__retarget_lock_release_recursive>
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	bd70      	pop	{r4, r5, r6, pc}
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da04      	bge.n	8001ce4 <_puts_r+0x60>
 8001cda:	69a2      	ldr	r2, [r4, #24]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dc17      	bgt.n	8001d10 <_puts_r+0x8c>
 8001ce0:	290a      	cmp	r1, #10
 8001ce2:	d015      	beq.n	8001d10 <_puts_r+0x8c>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	6022      	str	r2, [r4, #0]
 8001cea:	7019      	strb	r1, [r3, #0]
 8001cec:	68a3      	ldr	r3, [r4, #8]
 8001cee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	60a3      	str	r3, [r4, #8]
 8001cf6:	2900      	cmp	r1, #0
 8001cf8:	d1ed      	bne.n	8001cd6 <_puts_r+0x52>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da11      	bge.n	8001d22 <_puts_r+0x9e>
 8001cfe:	4622      	mov	r2, r4
 8001d00:	210a      	movs	r1, #10
 8001d02:	4628      	mov	r0, r5
 8001d04:	f000 f871 	bl	8001dea <__swbuf_r>
 8001d08:	3001      	adds	r0, #1
 8001d0a:	d0d7      	beq.n	8001cbc <_puts_r+0x38>
 8001d0c:	250a      	movs	r5, #10
 8001d0e:	e7d7      	b.n	8001cc0 <_puts_r+0x3c>
 8001d10:	4622      	mov	r2, r4
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 f869 	bl	8001dea <__swbuf_r>
 8001d18:	3001      	adds	r0, #1
 8001d1a:	d1e7      	bne.n	8001cec <_puts_r+0x68>
 8001d1c:	e7ce      	b.n	8001cbc <_puts_r+0x38>
 8001d1e:	3e01      	subs	r6, #1
 8001d20:	e7e4      	b.n	8001cec <_puts_r+0x68>
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	6022      	str	r2, [r4, #0]
 8001d28:	220a      	movs	r2, #10
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e7ee      	b.n	8001d0c <_puts_r+0x88>
	...

08001d30 <puts>:
 8001d30:	4b02      	ldr	r3, [pc, #8]	@ (8001d3c <puts+0xc>)
 8001d32:	4601      	mov	r1, r0
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f7ff bfa5 	b.w	8001c84 <_puts_r>
 8001d3a:	bf00      	nop
 8001d3c:	20000020 	.word	0x20000020

08001d40 <iscanf>:
 8001d40:	b40f      	push	{r0, r1, r2, r3}
 8001d42:	b507      	push	{r0, r1, r2, lr}
 8001d44:	4906      	ldr	r1, [pc, #24]	@ (8001d60 <iscanf+0x20>)
 8001d46:	ab04      	add	r3, sp, #16
 8001d48:	6808      	ldr	r0, [r1, #0]
 8001d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d4e:	6841      	ldr	r1, [r0, #4]
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	f000 febf 	bl	8002ad4 <_vfiscanf_r>
 8001d56:	b003      	add	sp, #12
 8001d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d5c:	b004      	add	sp, #16
 8001d5e:	4770      	bx	lr
 8001d60:	20000020 	.word	0x20000020

08001d64 <__sread>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	460c      	mov	r4, r1
 8001d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d6c:	f000 f8fc 	bl	8001f68 <_read_r>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	bfab      	itete	ge
 8001d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d76:	89a3      	ldrhlt	r3, [r4, #12]
 8001d78:	181b      	addge	r3, r3, r0
 8001d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d7e:	bfac      	ite	ge
 8001d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d82:	81a3      	strhlt	r3, [r4, #12]
 8001d84:	bd10      	pop	{r4, pc}

08001d86 <__swrite>:
 8001d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8a:	461f      	mov	r7, r3
 8001d8c:	898b      	ldrh	r3, [r1, #12]
 8001d8e:	4605      	mov	r5, r0
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	460c      	mov	r4, r1
 8001d94:	4616      	mov	r6, r2
 8001d96:	d505      	bpl.n	8001da4 <__swrite+0x1e>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da0:	f000 f8d0 	bl	8001f44 <_lseek_r>
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	4632      	mov	r2, r6
 8001da8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	4628      	mov	r0, r5
 8001db0:	463b      	mov	r3, r7
 8001db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dba:	f000 b8e7 	b.w	8001f8c <_write_r>

08001dbe <__sseek>:
 8001dbe:	b510      	push	{r4, lr}
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dc6:	f000 f8bd 	bl	8001f44 <_lseek_r>
 8001dca:	1c43      	adds	r3, r0, #1
 8001dcc:	89a3      	ldrh	r3, [r4, #12]
 8001dce:	bf15      	itete	ne
 8001dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001dda:	81a3      	strheq	r3, [r4, #12]
 8001ddc:	bf18      	it	ne
 8001dde:	81a3      	strhne	r3, [r4, #12]
 8001de0:	bd10      	pop	{r4, pc}

08001de2 <__sclose>:
 8001de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de6:	f000 b89d 	b.w	8001f24 <_close_r>

08001dea <__swbuf_r>:
 8001dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dec:	460e      	mov	r6, r1
 8001dee:	4614      	mov	r4, r2
 8001df0:	4605      	mov	r5, r0
 8001df2:	b118      	cbz	r0, 8001dfc <__swbuf_r+0x12>
 8001df4:	6a03      	ldr	r3, [r0, #32]
 8001df6:	b90b      	cbnz	r3, 8001dfc <__swbuf_r+0x12>
 8001df8:	f7ff fefc 	bl	8001bf4 <__sinit>
 8001dfc:	69a3      	ldr	r3, [r4, #24]
 8001dfe:	60a3      	str	r3, [r4, #8]
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	071a      	lsls	r2, r3, #28
 8001e04:	d501      	bpl.n	8001e0a <__swbuf_r+0x20>
 8001e06:	6923      	ldr	r3, [r4, #16]
 8001e08:	b943      	cbnz	r3, 8001e1c <__swbuf_r+0x32>
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f000 f82b 	bl	8001e68 <__swsetup_r>
 8001e12:	b118      	cbz	r0, 8001e1c <__swbuf_r+0x32>
 8001e14:	f04f 37ff 	mov.w	r7, #4294967295
 8001e18:	4638      	mov	r0, r7
 8001e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	6922      	ldr	r2, [r4, #16]
 8001e20:	b2f6      	uxtb	r6, r6
 8001e22:	1a98      	subs	r0, r3, r2
 8001e24:	6963      	ldr	r3, [r4, #20]
 8001e26:	4637      	mov	r7, r6
 8001e28:	4283      	cmp	r3, r0
 8001e2a:	dc05      	bgt.n	8001e38 <__swbuf_r+0x4e>
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f001 f830 	bl	8002e94 <_fflush_r>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d1ed      	bne.n	8001e14 <__swbuf_r+0x2a>
 8001e38:	68a3      	ldr	r3, [r4, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60a3      	str	r3, [r4, #8]
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	6022      	str	r2, [r4, #0]
 8001e44:	701e      	strb	r6, [r3, #0]
 8001e46:	6962      	ldr	r2, [r4, #20]
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d004      	beq.n	8001e58 <__swbuf_r+0x6e>
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	07db      	lsls	r3, r3, #31
 8001e52:	d5e1      	bpl.n	8001e18 <__swbuf_r+0x2e>
 8001e54:	2e0a      	cmp	r6, #10
 8001e56:	d1df      	bne.n	8001e18 <__swbuf_r+0x2e>
 8001e58:	4621      	mov	r1, r4
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f001 f81a 	bl	8002e94 <_fflush_r>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d0d9      	beq.n	8001e18 <__swbuf_r+0x2e>
 8001e64:	e7d6      	b.n	8001e14 <__swbuf_r+0x2a>
	...

08001e68 <__swsetup_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <__swsetup_r+0xa8>)
 8001e6c:	4605      	mov	r5, r0
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	460c      	mov	r4, r1
 8001e72:	b118      	cbz	r0, 8001e7c <__swsetup_r+0x14>
 8001e74:	6a03      	ldr	r3, [r0, #32]
 8001e76:	b90b      	cbnz	r3, 8001e7c <__swsetup_r+0x14>
 8001e78:	f7ff febc 	bl	8001bf4 <__sinit>
 8001e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e80:	0719      	lsls	r1, r3, #28
 8001e82:	d422      	bmi.n	8001eca <__swsetup_r+0x62>
 8001e84:	06da      	lsls	r2, r3, #27
 8001e86:	d407      	bmi.n	8001e98 <__swsetup_r+0x30>
 8001e88:	2209      	movs	r2, #9
 8001e8a:	602a      	str	r2, [r5, #0]
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	81a3      	strh	r3, [r4, #12]
 8001e96:	e033      	b.n	8001f00 <__swsetup_r+0x98>
 8001e98:	0758      	lsls	r0, r3, #29
 8001e9a:	d512      	bpl.n	8001ec2 <__swsetup_r+0x5a>
 8001e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e9e:	b141      	cbz	r1, 8001eb2 <__swsetup_r+0x4a>
 8001ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	d002      	beq.n	8001eae <__swsetup_r+0x46>
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f000 f8af 	bl	800200c <_free_r>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001eb2:	89a3      	ldrh	r3, [r4, #12]
 8001eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001eb8:	81a3      	strh	r3, [r4, #12]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6063      	str	r3, [r4, #4]
 8001ebe:	6923      	ldr	r3, [r4, #16]
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	89a3      	ldrh	r3, [r4, #12]
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	81a3      	strh	r3, [r4, #12]
 8001eca:	6923      	ldr	r3, [r4, #16]
 8001ecc:	b94b      	cbnz	r3, 8001ee2 <__swsetup_r+0x7a>
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed8:	d003      	beq.n	8001ee2 <__swsetup_r+0x7a>
 8001eda:	4621      	mov	r1, r4
 8001edc:	4628      	mov	r0, r5
 8001ede:	f001 f826 	bl	8002f2e <__smakebuf_r>
 8001ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee6:	f013 0201 	ands.w	r2, r3, #1
 8001eea:	d00a      	beq.n	8001f02 <__swsetup_r+0x9a>
 8001eec:	2200      	movs	r2, #0
 8001eee:	60a2      	str	r2, [r4, #8]
 8001ef0:	6962      	ldr	r2, [r4, #20]
 8001ef2:	4252      	negs	r2, r2
 8001ef4:	61a2      	str	r2, [r4, #24]
 8001ef6:	6922      	ldr	r2, [r4, #16]
 8001ef8:	b942      	cbnz	r2, 8001f0c <__swsetup_r+0xa4>
 8001efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001efe:	d1c5      	bne.n	8001e8c <__swsetup_r+0x24>
 8001f00:	bd38      	pop	{r3, r4, r5, pc}
 8001f02:	0799      	lsls	r1, r3, #30
 8001f04:	bf58      	it	pl
 8001f06:	6962      	ldrpl	r2, [r4, #20]
 8001f08:	60a2      	str	r2, [r4, #8]
 8001f0a:	e7f4      	b.n	8001ef6 <__swsetup_r+0x8e>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e7f7      	b.n	8001f00 <__swsetup_r+0x98>
 8001f10:	20000020 	.word	0x20000020

08001f14 <memset>:
 8001f14:	4603      	mov	r3, r0
 8001f16:	4402      	add	r2, r0
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <memset+0xa>
 8001f1c:	4770      	bx	lr
 8001f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f22:	e7f9      	b.n	8001f18 <memset+0x4>

08001f24 <_close_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	2300      	movs	r3, #0
 8001f28:	4d05      	ldr	r5, [pc, #20]	@ (8001f40 <_close_r+0x1c>)
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	602b      	str	r3, [r5, #0]
 8001f30:	f7ff fc10 	bl	8001754 <_close>
 8001f34:	1c43      	adds	r3, r0, #1
 8001f36:	d102      	bne.n	8001f3e <_close_r+0x1a>
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	b103      	cbz	r3, 8001f3e <_close_r+0x1a>
 8001f3c:	6023      	str	r3, [r4, #0]
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	200002c4 	.word	0x200002c4

08001f44 <_lseek_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4604      	mov	r4, r0
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4d05      	ldr	r5, [pc, #20]	@ (8001f64 <_lseek_r+0x20>)
 8001f50:	602a      	str	r2, [r5, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f7ff fbbf 	bl	80016d6 <_lseek>
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	d102      	bne.n	8001f62 <_lseek_r+0x1e>
 8001f5c:	682b      	ldr	r3, [r5, #0]
 8001f5e:	b103      	cbz	r3, 8001f62 <_lseek_r+0x1e>
 8001f60:	6023      	str	r3, [r4, #0]
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	200002c4 	.word	0x200002c4

08001f68 <_read_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	4d05      	ldr	r5, [pc, #20]	@ (8001f88 <_read_r+0x20>)
 8001f74:	602a      	str	r2, [r5, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fb57 	bl	800162a <_read>
 8001f7c:	1c43      	adds	r3, r0, #1
 8001f7e:	d102      	bne.n	8001f86 <_read_r+0x1e>
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	b103      	cbz	r3, 8001f86 <_read_r+0x1e>
 8001f84:	6023      	str	r3, [r4, #0]
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	200002c4 	.word	0x200002c4

08001f8c <_write_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	4d05      	ldr	r5, [pc, #20]	@ (8001fac <_write_r+0x20>)
 8001f98:	602a      	str	r2, [r5, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f7ff fbad 	bl	80016fa <_write>
 8001fa0:	1c43      	adds	r3, r0, #1
 8001fa2:	d102      	bne.n	8001faa <_write_r+0x1e>
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	b103      	cbz	r3, 8001faa <_write_r+0x1e>
 8001fa8:	6023      	str	r3, [r4, #0]
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	200002c4 	.word	0x200002c4

08001fb0 <__errno>:
 8001fb0:	4b01      	ldr	r3, [pc, #4]	@ (8001fb8 <__errno+0x8>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000020 	.word	0x20000020

08001fbc <__libc_init_array>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	4d0c      	ldr	r5, [pc, #48]	@ (8001ff4 <__libc_init_array+0x38>)
 8001fc2:	4c0d      	ldr	r4, [pc, #52]	@ (8001ff8 <__libc_init_array+0x3c>)
 8001fc4:	1b64      	subs	r4, r4, r5
 8001fc6:	10a4      	asrs	r4, r4, #2
 8001fc8:	42a6      	cmp	r6, r4
 8001fca:	d109      	bne.n	8001fe0 <__libc_init_array+0x24>
 8001fcc:	f001 face 	bl	800356c <_init>
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4d0a      	ldr	r5, [pc, #40]	@ (8001ffc <__libc_init_array+0x40>)
 8001fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002000 <__libc_init_array+0x44>)
 8001fd6:	1b64      	subs	r4, r4, r5
 8001fd8:	10a4      	asrs	r4, r4, #2
 8001fda:	42a6      	cmp	r6, r4
 8001fdc:	d105      	bne.n	8001fea <__libc_init_array+0x2e>
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe4:	4798      	blx	r3
 8001fe6:	3601      	adds	r6, #1
 8001fe8:	e7ee      	b.n	8001fc8 <__libc_init_array+0xc>
 8001fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fee:	4798      	blx	r3
 8001ff0:	3601      	adds	r6, #1
 8001ff2:	e7f2      	b.n	8001fda <__libc_init_array+0x1e>
 8001ff4:	08003768 	.word	0x08003768
 8001ff8:	08003768 	.word	0x08003768
 8001ffc:	08003768 	.word	0x08003768
 8002000:	0800376c 	.word	0x0800376c

08002004 <__retarget_lock_init_recursive>:
 8002004:	4770      	bx	lr

08002006 <__retarget_lock_acquire_recursive>:
 8002006:	4770      	bx	lr

08002008 <__retarget_lock_release_recursive>:
 8002008:	4770      	bx	lr
	...

0800200c <_free_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	4605      	mov	r5, r0
 8002010:	2900      	cmp	r1, #0
 8002012:	d040      	beq.n	8002096 <_free_r+0x8a>
 8002014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002018:	1f0c      	subs	r4, r1, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	bfb8      	it	lt
 800201e:	18e4      	addlt	r4, r4, r3
 8002020:	f000 f8de 	bl	80021e0 <__malloc_lock>
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <_free_r+0x8c>)
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	b933      	cbnz	r3, 8002038 <_free_r+0x2c>
 800202a:	6063      	str	r3, [r4, #4]
 800202c:	6014      	str	r4, [r2, #0]
 800202e:	4628      	mov	r0, r5
 8002030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002034:	f000 b8da 	b.w	80021ec <__malloc_unlock>
 8002038:	42a3      	cmp	r3, r4
 800203a:	d908      	bls.n	800204e <_free_r+0x42>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	1821      	adds	r1, r4, r0
 8002040:	428b      	cmp	r3, r1
 8002042:	bf01      	itttt	eq
 8002044:	6819      	ldreq	r1, [r3, #0]
 8002046:	685b      	ldreq	r3, [r3, #4]
 8002048:	1809      	addeq	r1, r1, r0
 800204a:	6021      	streq	r1, [r4, #0]
 800204c:	e7ed      	b.n	800202a <_free_r+0x1e>
 800204e:	461a      	mov	r2, r3
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	b10b      	cbz	r3, 8002058 <_free_r+0x4c>
 8002054:	42a3      	cmp	r3, r4
 8002056:	d9fa      	bls.n	800204e <_free_r+0x42>
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	1850      	adds	r0, r2, r1
 800205c:	42a0      	cmp	r0, r4
 800205e:	d10b      	bne.n	8002078 <_free_r+0x6c>
 8002060:	6820      	ldr	r0, [r4, #0]
 8002062:	4401      	add	r1, r0
 8002064:	1850      	adds	r0, r2, r1
 8002066:	4283      	cmp	r3, r0
 8002068:	6011      	str	r1, [r2, #0]
 800206a:	d1e0      	bne.n	800202e <_free_r+0x22>
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4408      	add	r0, r1
 8002072:	6010      	str	r0, [r2, #0]
 8002074:	6053      	str	r3, [r2, #4]
 8002076:	e7da      	b.n	800202e <_free_r+0x22>
 8002078:	d902      	bls.n	8002080 <_free_r+0x74>
 800207a:	230c      	movs	r3, #12
 800207c:	602b      	str	r3, [r5, #0]
 800207e:	e7d6      	b.n	800202e <_free_r+0x22>
 8002080:	6820      	ldr	r0, [r4, #0]
 8002082:	1821      	adds	r1, r4, r0
 8002084:	428b      	cmp	r3, r1
 8002086:	bf01      	itttt	eq
 8002088:	6819      	ldreq	r1, [r3, #0]
 800208a:	685b      	ldreq	r3, [r3, #4]
 800208c:	1809      	addeq	r1, r1, r0
 800208e:	6021      	streq	r1, [r4, #0]
 8002090:	6063      	str	r3, [r4, #4]
 8002092:	6054      	str	r4, [r2, #4]
 8002094:	e7cb      	b.n	800202e <_free_r+0x22>
 8002096:	bd38      	pop	{r3, r4, r5, pc}
 8002098:	200002d0 	.word	0x200002d0

0800209c <sbrk_aligned>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	4e0f      	ldr	r6, [pc, #60]	@ (80020dc <sbrk_aligned+0x40>)
 80020a0:	460c      	mov	r4, r1
 80020a2:	6831      	ldr	r1, [r6, #0]
 80020a4:	4605      	mov	r5, r0
 80020a6:	b911      	cbnz	r1, 80020ae <sbrk_aligned+0x12>
 80020a8:	f001 f912 	bl	80032d0 <_sbrk_r>
 80020ac:	6030      	str	r0, [r6, #0]
 80020ae:	4621      	mov	r1, r4
 80020b0:	4628      	mov	r0, r5
 80020b2:	f001 f90d 	bl	80032d0 <_sbrk_r>
 80020b6:	1c43      	adds	r3, r0, #1
 80020b8:	d103      	bne.n	80020c2 <sbrk_aligned+0x26>
 80020ba:	f04f 34ff 	mov.w	r4, #4294967295
 80020be:	4620      	mov	r0, r4
 80020c0:	bd70      	pop	{r4, r5, r6, pc}
 80020c2:	1cc4      	adds	r4, r0, #3
 80020c4:	f024 0403 	bic.w	r4, r4, #3
 80020c8:	42a0      	cmp	r0, r4
 80020ca:	d0f8      	beq.n	80020be <sbrk_aligned+0x22>
 80020cc:	1a21      	subs	r1, r4, r0
 80020ce:	4628      	mov	r0, r5
 80020d0:	f001 f8fe 	bl	80032d0 <_sbrk_r>
 80020d4:	3001      	adds	r0, #1
 80020d6:	d1f2      	bne.n	80020be <sbrk_aligned+0x22>
 80020d8:	e7ef      	b.n	80020ba <sbrk_aligned+0x1e>
 80020da:	bf00      	nop
 80020dc:	200002cc 	.word	0x200002cc

080020e0 <_malloc_r>:
 80020e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020e4:	1ccd      	adds	r5, r1, #3
 80020e6:	f025 0503 	bic.w	r5, r5, #3
 80020ea:	3508      	adds	r5, #8
 80020ec:	2d0c      	cmp	r5, #12
 80020ee:	bf38      	it	cc
 80020f0:	250c      	movcc	r5, #12
 80020f2:	2d00      	cmp	r5, #0
 80020f4:	4606      	mov	r6, r0
 80020f6:	db01      	blt.n	80020fc <_malloc_r+0x1c>
 80020f8:	42a9      	cmp	r1, r5
 80020fa:	d904      	bls.n	8002106 <_malloc_r+0x26>
 80020fc:	230c      	movs	r3, #12
 80020fe:	6033      	str	r3, [r6, #0]
 8002100:	2000      	movs	r0, #0
 8002102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80021dc <_malloc_r+0xfc>
 800210a:	f000 f869 	bl	80021e0 <__malloc_lock>
 800210e:	f8d8 3000 	ldr.w	r3, [r8]
 8002112:	461c      	mov	r4, r3
 8002114:	bb44      	cbnz	r4, 8002168 <_malloc_r+0x88>
 8002116:	4629      	mov	r1, r5
 8002118:	4630      	mov	r0, r6
 800211a:	f7ff ffbf 	bl	800209c <sbrk_aligned>
 800211e:	1c43      	adds	r3, r0, #1
 8002120:	4604      	mov	r4, r0
 8002122:	d158      	bne.n	80021d6 <_malloc_r+0xf6>
 8002124:	f8d8 4000 	ldr.w	r4, [r8]
 8002128:	4627      	mov	r7, r4
 800212a:	2f00      	cmp	r7, #0
 800212c:	d143      	bne.n	80021b6 <_malloc_r+0xd6>
 800212e:	2c00      	cmp	r4, #0
 8002130:	d04b      	beq.n	80021ca <_malloc_r+0xea>
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	4639      	mov	r1, r7
 8002136:	4630      	mov	r0, r6
 8002138:	eb04 0903 	add.w	r9, r4, r3
 800213c:	f001 f8c8 	bl	80032d0 <_sbrk_r>
 8002140:	4581      	cmp	r9, r0
 8002142:	d142      	bne.n	80021ca <_malloc_r+0xea>
 8002144:	6821      	ldr	r1, [r4, #0]
 8002146:	4630      	mov	r0, r6
 8002148:	1a6d      	subs	r5, r5, r1
 800214a:	4629      	mov	r1, r5
 800214c:	f7ff ffa6 	bl	800209c <sbrk_aligned>
 8002150:	3001      	adds	r0, #1
 8002152:	d03a      	beq.n	80021ca <_malloc_r+0xea>
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	442b      	add	r3, r5
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	f8d8 3000 	ldr.w	r3, [r8]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	bb62      	cbnz	r2, 80021bc <_malloc_r+0xdc>
 8002162:	f8c8 7000 	str.w	r7, [r8]
 8002166:	e00f      	b.n	8002188 <_malloc_r+0xa8>
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	1b52      	subs	r2, r2, r5
 800216c:	d420      	bmi.n	80021b0 <_malloc_r+0xd0>
 800216e:	2a0b      	cmp	r2, #11
 8002170:	d917      	bls.n	80021a2 <_malloc_r+0xc2>
 8002172:	1961      	adds	r1, r4, r5
 8002174:	42a3      	cmp	r3, r4
 8002176:	6025      	str	r5, [r4, #0]
 8002178:	bf18      	it	ne
 800217a:	6059      	strne	r1, [r3, #4]
 800217c:	6863      	ldr	r3, [r4, #4]
 800217e:	bf08      	it	eq
 8002180:	f8c8 1000 	streq.w	r1, [r8]
 8002184:	5162      	str	r2, [r4, r5]
 8002186:	604b      	str	r3, [r1, #4]
 8002188:	4630      	mov	r0, r6
 800218a:	f000 f82f 	bl	80021ec <__malloc_unlock>
 800218e:	f104 000b 	add.w	r0, r4, #11
 8002192:	1d23      	adds	r3, r4, #4
 8002194:	f020 0007 	bic.w	r0, r0, #7
 8002198:	1ac2      	subs	r2, r0, r3
 800219a:	bf1c      	itt	ne
 800219c:	1a1b      	subne	r3, r3, r0
 800219e:	50a3      	strne	r3, [r4, r2]
 80021a0:	e7af      	b.n	8002102 <_malloc_r+0x22>
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	bf0c      	ite	eq
 80021a8:	f8c8 2000 	streq.w	r2, [r8]
 80021ac:	605a      	strne	r2, [r3, #4]
 80021ae:	e7eb      	b.n	8002188 <_malloc_r+0xa8>
 80021b0:	4623      	mov	r3, r4
 80021b2:	6864      	ldr	r4, [r4, #4]
 80021b4:	e7ae      	b.n	8002114 <_malloc_r+0x34>
 80021b6:	463c      	mov	r4, r7
 80021b8:	687f      	ldr	r7, [r7, #4]
 80021ba:	e7b6      	b.n	800212a <_malloc_r+0x4a>
 80021bc:	461a      	mov	r2, r3
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	42a3      	cmp	r3, r4
 80021c2:	d1fb      	bne.n	80021bc <_malloc_r+0xdc>
 80021c4:	2300      	movs	r3, #0
 80021c6:	6053      	str	r3, [r2, #4]
 80021c8:	e7de      	b.n	8002188 <_malloc_r+0xa8>
 80021ca:	230c      	movs	r3, #12
 80021cc:	4630      	mov	r0, r6
 80021ce:	6033      	str	r3, [r6, #0]
 80021d0:	f000 f80c 	bl	80021ec <__malloc_unlock>
 80021d4:	e794      	b.n	8002100 <_malloc_r+0x20>
 80021d6:	6005      	str	r5, [r0, #0]
 80021d8:	e7d6      	b.n	8002188 <_malloc_r+0xa8>
 80021da:	bf00      	nop
 80021dc:	200002d0 	.word	0x200002d0

080021e0 <__malloc_lock>:
 80021e0:	4801      	ldr	r0, [pc, #4]	@ (80021e8 <__malloc_lock+0x8>)
 80021e2:	f7ff bf10 	b.w	8002006 <__retarget_lock_acquire_recursive>
 80021e6:	bf00      	nop
 80021e8:	200002c8 	.word	0x200002c8

080021ec <__malloc_unlock>:
 80021ec:	4801      	ldr	r0, [pc, #4]	@ (80021f4 <__malloc_unlock+0x8>)
 80021ee:	f7ff bf0b 	b.w	8002008 <__retarget_lock_release_recursive>
 80021f2:	bf00      	nop
 80021f4:	200002c8 	.word	0x200002c8

080021f8 <__sfputc_r>:
 80021f8:	6893      	ldr	r3, [r2, #8]
 80021fa:	b410      	push	{r4}
 80021fc:	3b01      	subs	r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	6093      	str	r3, [r2, #8]
 8002202:	da07      	bge.n	8002214 <__sfputc_r+0x1c>
 8002204:	6994      	ldr	r4, [r2, #24]
 8002206:	42a3      	cmp	r3, r4
 8002208:	db01      	blt.n	800220e <__sfputc_r+0x16>
 800220a:	290a      	cmp	r1, #10
 800220c:	d102      	bne.n	8002214 <__sfputc_r+0x1c>
 800220e:	bc10      	pop	{r4}
 8002210:	f7ff bdeb 	b.w	8001dea <__swbuf_r>
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	1c58      	adds	r0, r3, #1
 8002218:	6010      	str	r0, [r2, #0]
 800221a:	7019      	strb	r1, [r3, #0]
 800221c:	4608      	mov	r0, r1
 800221e:	bc10      	pop	{r4}
 8002220:	4770      	bx	lr

08002222 <__sfputs_r>:
 8002222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002224:	4606      	mov	r6, r0
 8002226:	460f      	mov	r7, r1
 8002228:	4614      	mov	r4, r2
 800222a:	18d5      	adds	r5, r2, r3
 800222c:	42ac      	cmp	r4, r5
 800222e:	d101      	bne.n	8002234 <__sfputs_r+0x12>
 8002230:	2000      	movs	r0, #0
 8002232:	e007      	b.n	8002244 <__sfputs_r+0x22>
 8002234:	463a      	mov	r2, r7
 8002236:	4630      	mov	r0, r6
 8002238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800223c:	f7ff ffdc 	bl	80021f8 <__sfputc_r>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d1f3      	bne.n	800222c <__sfputs_r+0xa>
 8002244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002248 <_vfiprintf_r>:
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	460d      	mov	r5, r1
 800224e:	4614      	mov	r4, r2
 8002250:	4698      	mov	r8, r3
 8002252:	4606      	mov	r6, r0
 8002254:	b09d      	sub	sp, #116	@ 0x74
 8002256:	b118      	cbz	r0, 8002260 <_vfiprintf_r+0x18>
 8002258:	6a03      	ldr	r3, [r0, #32]
 800225a:	b90b      	cbnz	r3, 8002260 <_vfiprintf_r+0x18>
 800225c:	f7ff fcca 	bl	8001bf4 <__sinit>
 8002260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002262:	07d9      	lsls	r1, r3, #31
 8002264:	d405      	bmi.n	8002272 <_vfiprintf_r+0x2a>
 8002266:	89ab      	ldrh	r3, [r5, #12]
 8002268:	059a      	lsls	r2, r3, #22
 800226a:	d402      	bmi.n	8002272 <_vfiprintf_r+0x2a>
 800226c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800226e:	f7ff feca 	bl	8002006 <__retarget_lock_acquire_recursive>
 8002272:	89ab      	ldrh	r3, [r5, #12]
 8002274:	071b      	lsls	r3, r3, #28
 8002276:	d501      	bpl.n	800227c <_vfiprintf_r+0x34>
 8002278:	692b      	ldr	r3, [r5, #16]
 800227a:	b99b      	cbnz	r3, 80022a4 <_vfiprintf_r+0x5c>
 800227c:	4629      	mov	r1, r5
 800227e:	4630      	mov	r0, r6
 8002280:	f7ff fdf2 	bl	8001e68 <__swsetup_r>
 8002284:	b170      	cbz	r0, 80022a4 <_vfiprintf_r+0x5c>
 8002286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002288:	07dc      	lsls	r4, r3, #31
 800228a:	d504      	bpl.n	8002296 <_vfiprintf_r+0x4e>
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	b01d      	add	sp, #116	@ 0x74
 8002292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002296:	89ab      	ldrh	r3, [r5, #12]
 8002298:	0598      	lsls	r0, r3, #22
 800229a:	d4f7      	bmi.n	800228c <_vfiprintf_r+0x44>
 800229c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800229e:	f7ff feb3 	bl	8002008 <__retarget_lock_release_recursive>
 80022a2:	e7f3      	b.n	800228c <_vfiprintf_r+0x44>
 80022a4:	2300      	movs	r3, #0
 80022a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80022a8:	2320      	movs	r3, #32
 80022aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022ae:	2330      	movs	r3, #48	@ 0x30
 80022b0:	f04f 0901 	mov.w	r9, #1
 80022b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80022b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002464 <_vfiprintf_r+0x21c>
 80022bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022c0:	4623      	mov	r3, r4
 80022c2:	469a      	mov	sl, r3
 80022c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022c8:	b10a      	cbz	r2, 80022ce <_vfiprintf_r+0x86>
 80022ca:	2a25      	cmp	r2, #37	@ 0x25
 80022cc:	d1f9      	bne.n	80022c2 <_vfiprintf_r+0x7a>
 80022ce:	ebba 0b04 	subs.w	fp, sl, r4
 80022d2:	d00b      	beq.n	80022ec <_vfiprintf_r+0xa4>
 80022d4:	465b      	mov	r3, fp
 80022d6:	4622      	mov	r2, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	4630      	mov	r0, r6
 80022dc:	f7ff ffa1 	bl	8002222 <__sfputs_r>
 80022e0:	3001      	adds	r0, #1
 80022e2:	f000 80a7 	beq.w	8002434 <_vfiprintf_r+0x1ec>
 80022e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022e8:	445a      	add	r2, fp
 80022ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80022ec:	f89a 3000 	ldrb.w	r3, [sl]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 809f 	beq.w	8002434 <_vfiprintf_r+0x1ec>
 80022f6:	2300      	movs	r3, #0
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002300:	f10a 0a01 	add.w	sl, sl, #1
 8002304:	9304      	str	r3, [sp, #16]
 8002306:	9307      	str	r3, [sp, #28]
 8002308:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800230c:	931a      	str	r3, [sp, #104]	@ 0x68
 800230e:	4654      	mov	r4, sl
 8002310:	2205      	movs	r2, #5
 8002312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002316:	4853      	ldr	r0, [pc, #332]	@ (8002464 <_vfiprintf_r+0x21c>)
 8002318:	f000 ffea 	bl	80032f0 <memchr>
 800231c:	9a04      	ldr	r2, [sp, #16]
 800231e:	b9d8      	cbnz	r0, 8002358 <_vfiprintf_r+0x110>
 8002320:	06d1      	lsls	r1, r2, #27
 8002322:	bf44      	itt	mi
 8002324:	2320      	movmi	r3, #32
 8002326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800232a:	0713      	lsls	r3, r2, #28
 800232c:	bf44      	itt	mi
 800232e:	232b      	movmi	r3, #43	@ 0x2b
 8002330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002334:	f89a 3000 	ldrb.w	r3, [sl]
 8002338:	2b2a      	cmp	r3, #42	@ 0x2a
 800233a:	d015      	beq.n	8002368 <_vfiprintf_r+0x120>
 800233c:	4654      	mov	r4, sl
 800233e:	2000      	movs	r0, #0
 8002340:	f04f 0c0a 	mov.w	ip, #10
 8002344:	9a07      	ldr	r2, [sp, #28]
 8002346:	4621      	mov	r1, r4
 8002348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800234c:	3b30      	subs	r3, #48	@ 0x30
 800234e:	2b09      	cmp	r3, #9
 8002350:	d94b      	bls.n	80023ea <_vfiprintf_r+0x1a2>
 8002352:	b1b0      	cbz	r0, 8002382 <_vfiprintf_r+0x13a>
 8002354:	9207      	str	r2, [sp, #28]
 8002356:	e014      	b.n	8002382 <_vfiprintf_r+0x13a>
 8002358:	eba0 0308 	sub.w	r3, r0, r8
 800235c:	fa09 f303 	lsl.w	r3, r9, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	46a2      	mov	sl, r4
 8002364:	9304      	str	r3, [sp, #16]
 8002366:	e7d2      	b.n	800230e <_vfiprintf_r+0xc6>
 8002368:	9b03      	ldr	r3, [sp, #12]
 800236a:	1d19      	adds	r1, r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	9103      	str	r1, [sp, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	bfbb      	ittet	lt
 8002374:	425b      	neglt	r3, r3
 8002376:	f042 0202 	orrlt.w	r2, r2, #2
 800237a:	9307      	strge	r3, [sp, #28]
 800237c:	9307      	strlt	r3, [sp, #28]
 800237e:	bfb8      	it	lt
 8002380:	9204      	strlt	r2, [sp, #16]
 8002382:	7823      	ldrb	r3, [r4, #0]
 8002384:	2b2e      	cmp	r3, #46	@ 0x2e
 8002386:	d10a      	bne.n	800239e <_vfiprintf_r+0x156>
 8002388:	7863      	ldrb	r3, [r4, #1]
 800238a:	2b2a      	cmp	r3, #42	@ 0x2a
 800238c:	d132      	bne.n	80023f4 <_vfiprintf_r+0x1ac>
 800238e:	9b03      	ldr	r3, [sp, #12]
 8002390:	3402      	adds	r4, #2
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	9203      	str	r2, [sp, #12]
 8002398:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800239c:	9305      	str	r3, [sp, #20]
 800239e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002468 <_vfiprintf_r+0x220>
 80023a2:	2203      	movs	r2, #3
 80023a4:	4650      	mov	r0, sl
 80023a6:	7821      	ldrb	r1, [r4, #0]
 80023a8:	f000 ffa2 	bl	80032f0 <memchr>
 80023ac:	b138      	cbz	r0, 80023be <_vfiprintf_r+0x176>
 80023ae:	2240      	movs	r2, #64	@ 0x40
 80023b0:	9b04      	ldr	r3, [sp, #16]
 80023b2:	eba0 000a 	sub.w	r0, r0, sl
 80023b6:	4082      	lsls	r2, r0
 80023b8:	4313      	orrs	r3, r2
 80023ba:	3401      	adds	r4, #1
 80023bc:	9304      	str	r3, [sp, #16]
 80023be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023c2:	2206      	movs	r2, #6
 80023c4:	4829      	ldr	r0, [pc, #164]	@ (800246c <_vfiprintf_r+0x224>)
 80023c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023ca:	f000 ff91 	bl	80032f0 <memchr>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d03f      	beq.n	8002452 <_vfiprintf_r+0x20a>
 80023d2:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <_vfiprintf_r+0x228>)
 80023d4:	bb1b      	cbnz	r3, 800241e <_vfiprintf_r+0x1d6>
 80023d6:	9b03      	ldr	r3, [sp, #12]
 80023d8:	3307      	adds	r3, #7
 80023da:	f023 0307 	bic.w	r3, r3, #7
 80023de:	3308      	adds	r3, #8
 80023e0:	9303      	str	r3, [sp, #12]
 80023e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023e4:	443b      	add	r3, r7
 80023e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80023e8:	e76a      	b.n	80022c0 <_vfiprintf_r+0x78>
 80023ea:	460c      	mov	r4, r1
 80023ec:	2001      	movs	r0, #1
 80023ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80023f2:	e7a8      	b.n	8002346 <_vfiprintf_r+0xfe>
 80023f4:	2300      	movs	r3, #0
 80023f6:	f04f 0c0a 	mov.w	ip, #10
 80023fa:	4619      	mov	r1, r3
 80023fc:	3401      	adds	r4, #1
 80023fe:	9305      	str	r3, [sp, #20]
 8002400:	4620      	mov	r0, r4
 8002402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002406:	3a30      	subs	r2, #48	@ 0x30
 8002408:	2a09      	cmp	r2, #9
 800240a:	d903      	bls.n	8002414 <_vfiprintf_r+0x1cc>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0c6      	beq.n	800239e <_vfiprintf_r+0x156>
 8002410:	9105      	str	r1, [sp, #20]
 8002412:	e7c4      	b.n	800239e <_vfiprintf_r+0x156>
 8002414:	4604      	mov	r4, r0
 8002416:	2301      	movs	r3, #1
 8002418:	fb0c 2101 	mla	r1, ip, r1, r2
 800241c:	e7f0      	b.n	8002400 <_vfiprintf_r+0x1b8>
 800241e:	ab03      	add	r3, sp, #12
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	462a      	mov	r2, r5
 8002424:	4630      	mov	r0, r6
 8002426:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <_vfiprintf_r+0x22c>)
 8002428:	a904      	add	r1, sp, #16
 800242a:	f3af 8000 	nop.w
 800242e:	4607      	mov	r7, r0
 8002430:	1c78      	adds	r0, r7, #1
 8002432:	d1d6      	bne.n	80023e2 <_vfiprintf_r+0x19a>
 8002434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002436:	07d9      	lsls	r1, r3, #31
 8002438:	d405      	bmi.n	8002446 <_vfiprintf_r+0x1fe>
 800243a:	89ab      	ldrh	r3, [r5, #12]
 800243c:	059a      	lsls	r2, r3, #22
 800243e:	d402      	bmi.n	8002446 <_vfiprintf_r+0x1fe>
 8002440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002442:	f7ff fde1 	bl	8002008 <__retarget_lock_release_recursive>
 8002446:	89ab      	ldrh	r3, [r5, #12]
 8002448:	065b      	lsls	r3, r3, #25
 800244a:	f53f af1f 	bmi.w	800228c <_vfiprintf_r+0x44>
 800244e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002450:	e71e      	b.n	8002290 <_vfiprintf_r+0x48>
 8002452:	ab03      	add	r3, sp, #12
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	462a      	mov	r2, r5
 8002458:	4630      	mov	r0, r6
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <_vfiprintf_r+0x22c>)
 800245c:	a904      	add	r1, sp, #16
 800245e:	f000 f87d 	bl	800255c <_printf_i>
 8002462:	e7e4      	b.n	800242e <_vfiprintf_r+0x1e6>
 8002464:	08003610 	.word	0x08003610
 8002468:	08003616 	.word	0x08003616
 800246c:	0800361a 	.word	0x0800361a
 8002470:	00000000 	.word	0x00000000
 8002474:	08002223 	.word	0x08002223

08002478 <_printf_common>:
 8002478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800247c:	4616      	mov	r6, r2
 800247e:	4698      	mov	r8, r3
 8002480:	688a      	ldr	r2, [r1, #8]
 8002482:	690b      	ldr	r3, [r1, #16]
 8002484:	4607      	mov	r7, r0
 8002486:	4293      	cmp	r3, r2
 8002488:	bfb8      	it	lt
 800248a:	4613      	movlt	r3, r2
 800248c:	6033      	str	r3, [r6, #0]
 800248e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002492:	460c      	mov	r4, r1
 8002494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002498:	b10a      	cbz	r2, 800249e <_printf_common+0x26>
 800249a:	3301      	adds	r3, #1
 800249c:	6033      	str	r3, [r6, #0]
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	0699      	lsls	r1, r3, #26
 80024a2:	bf42      	ittt	mi
 80024a4:	6833      	ldrmi	r3, [r6, #0]
 80024a6:	3302      	addmi	r3, #2
 80024a8:	6033      	strmi	r3, [r6, #0]
 80024aa:	6825      	ldr	r5, [r4, #0]
 80024ac:	f015 0506 	ands.w	r5, r5, #6
 80024b0:	d106      	bne.n	80024c0 <_printf_common+0x48>
 80024b2:	f104 0a19 	add.w	sl, r4, #25
 80024b6:	68e3      	ldr	r3, [r4, #12]
 80024b8:	6832      	ldr	r2, [r6, #0]
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	42ab      	cmp	r3, r5
 80024be:	dc2b      	bgt.n	8002518 <_printf_common+0xa0>
 80024c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	3b00      	subs	r3, #0
 80024c8:	bf18      	it	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	0692      	lsls	r2, r2, #26
 80024ce:	d430      	bmi.n	8002532 <_printf_common+0xba>
 80024d0:	4641      	mov	r1, r8
 80024d2:	4638      	mov	r0, r7
 80024d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80024d8:	47c8      	blx	r9
 80024da:	3001      	adds	r0, #1
 80024dc:	d023      	beq.n	8002526 <_printf_common+0xae>
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	6922      	ldr	r2, [r4, #16]
 80024e2:	f003 0306 	and.w	r3, r3, #6
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf14      	ite	ne
 80024ea:	2500      	movne	r5, #0
 80024ec:	6833      	ldreq	r3, [r6, #0]
 80024ee:	f04f 0600 	mov.w	r6, #0
 80024f2:	bf08      	it	eq
 80024f4:	68e5      	ldreq	r5, [r4, #12]
 80024f6:	f104 041a 	add.w	r4, r4, #26
 80024fa:	bf08      	it	eq
 80024fc:	1aed      	subeq	r5, r5, r3
 80024fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002502:	bf08      	it	eq
 8002504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002508:	4293      	cmp	r3, r2
 800250a:	bfc4      	itt	gt
 800250c:	1a9b      	subgt	r3, r3, r2
 800250e:	18ed      	addgt	r5, r5, r3
 8002510:	42b5      	cmp	r5, r6
 8002512:	d11a      	bne.n	800254a <_printf_common+0xd2>
 8002514:	2000      	movs	r0, #0
 8002516:	e008      	b.n	800252a <_printf_common+0xb2>
 8002518:	2301      	movs	r3, #1
 800251a:	4652      	mov	r2, sl
 800251c:	4641      	mov	r1, r8
 800251e:	4638      	mov	r0, r7
 8002520:	47c8      	blx	r9
 8002522:	3001      	adds	r0, #1
 8002524:	d103      	bne.n	800252e <_printf_common+0xb6>
 8002526:	f04f 30ff 	mov.w	r0, #4294967295
 800252a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800252e:	3501      	adds	r5, #1
 8002530:	e7c1      	b.n	80024b6 <_printf_common+0x3e>
 8002532:	2030      	movs	r0, #48	@ 0x30
 8002534:	18e1      	adds	r1, r4, r3
 8002536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002540:	4422      	add	r2, r4
 8002542:	3302      	adds	r3, #2
 8002544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002548:	e7c2      	b.n	80024d0 <_printf_common+0x58>
 800254a:	2301      	movs	r3, #1
 800254c:	4622      	mov	r2, r4
 800254e:	4641      	mov	r1, r8
 8002550:	4638      	mov	r0, r7
 8002552:	47c8      	blx	r9
 8002554:	3001      	adds	r0, #1
 8002556:	d0e6      	beq.n	8002526 <_printf_common+0xae>
 8002558:	3601      	adds	r6, #1
 800255a:	e7d9      	b.n	8002510 <_printf_common+0x98>

0800255c <_printf_i>:
 800255c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002560:	7e0f      	ldrb	r7, [r1, #24]
 8002562:	4691      	mov	r9, r2
 8002564:	2f78      	cmp	r7, #120	@ 0x78
 8002566:	4680      	mov	r8, r0
 8002568:	460c      	mov	r4, r1
 800256a:	469a      	mov	sl, r3
 800256c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800256e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002572:	d807      	bhi.n	8002584 <_printf_i+0x28>
 8002574:	2f62      	cmp	r7, #98	@ 0x62
 8002576:	d80a      	bhi.n	800258e <_printf_i+0x32>
 8002578:	2f00      	cmp	r7, #0
 800257a:	f000 80d3 	beq.w	8002724 <_printf_i+0x1c8>
 800257e:	2f58      	cmp	r7, #88	@ 0x58
 8002580:	f000 80ba 	beq.w	80026f8 <_printf_i+0x19c>
 8002584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800258c:	e03a      	b.n	8002604 <_printf_i+0xa8>
 800258e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002592:	2b15      	cmp	r3, #21
 8002594:	d8f6      	bhi.n	8002584 <_printf_i+0x28>
 8002596:	a101      	add	r1, pc, #4	@ (adr r1, 800259c <_printf_i+0x40>)
 8002598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800259c:	080025f5 	.word	0x080025f5
 80025a0:	08002609 	.word	0x08002609
 80025a4:	08002585 	.word	0x08002585
 80025a8:	08002585 	.word	0x08002585
 80025ac:	08002585 	.word	0x08002585
 80025b0:	08002585 	.word	0x08002585
 80025b4:	08002609 	.word	0x08002609
 80025b8:	08002585 	.word	0x08002585
 80025bc:	08002585 	.word	0x08002585
 80025c0:	08002585 	.word	0x08002585
 80025c4:	08002585 	.word	0x08002585
 80025c8:	0800270b 	.word	0x0800270b
 80025cc:	08002633 	.word	0x08002633
 80025d0:	080026c5 	.word	0x080026c5
 80025d4:	08002585 	.word	0x08002585
 80025d8:	08002585 	.word	0x08002585
 80025dc:	0800272d 	.word	0x0800272d
 80025e0:	08002585 	.word	0x08002585
 80025e4:	08002633 	.word	0x08002633
 80025e8:	08002585 	.word	0x08002585
 80025ec:	08002585 	.word	0x08002585
 80025f0:	080026cd 	.word	0x080026cd
 80025f4:	6833      	ldr	r3, [r6, #0]
 80025f6:	1d1a      	adds	r2, r3, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6032      	str	r2, [r6, #0]
 80025fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002604:	2301      	movs	r3, #1
 8002606:	e09e      	b.n	8002746 <_printf_i+0x1ea>
 8002608:	6833      	ldr	r3, [r6, #0]
 800260a:	6820      	ldr	r0, [r4, #0]
 800260c:	1d19      	adds	r1, r3, #4
 800260e:	6031      	str	r1, [r6, #0]
 8002610:	0606      	lsls	r6, r0, #24
 8002612:	d501      	bpl.n	8002618 <_printf_i+0xbc>
 8002614:	681d      	ldr	r5, [r3, #0]
 8002616:	e003      	b.n	8002620 <_printf_i+0xc4>
 8002618:	0645      	lsls	r5, r0, #25
 800261a:	d5fb      	bpl.n	8002614 <_printf_i+0xb8>
 800261c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002620:	2d00      	cmp	r5, #0
 8002622:	da03      	bge.n	800262c <_printf_i+0xd0>
 8002624:	232d      	movs	r3, #45	@ 0x2d
 8002626:	426d      	negs	r5, r5
 8002628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800262c:	230a      	movs	r3, #10
 800262e:	4859      	ldr	r0, [pc, #356]	@ (8002794 <_printf_i+0x238>)
 8002630:	e011      	b.n	8002656 <_printf_i+0xfa>
 8002632:	6821      	ldr	r1, [r4, #0]
 8002634:	6833      	ldr	r3, [r6, #0]
 8002636:	0608      	lsls	r0, r1, #24
 8002638:	f853 5b04 	ldr.w	r5, [r3], #4
 800263c:	d402      	bmi.n	8002644 <_printf_i+0xe8>
 800263e:	0649      	lsls	r1, r1, #25
 8002640:	bf48      	it	mi
 8002642:	b2ad      	uxthmi	r5, r5
 8002644:	2f6f      	cmp	r7, #111	@ 0x6f
 8002646:	6033      	str	r3, [r6, #0]
 8002648:	bf14      	ite	ne
 800264a:	230a      	movne	r3, #10
 800264c:	2308      	moveq	r3, #8
 800264e:	4851      	ldr	r0, [pc, #324]	@ (8002794 <_printf_i+0x238>)
 8002650:	2100      	movs	r1, #0
 8002652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002656:	6866      	ldr	r6, [r4, #4]
 8002658:	2e00      	cmp	r6, #0
 800265a:	bfa8      	it	ge
 800265c:	6821      	ldrge	r1, [r4, #0]
 800265e:	60a6      	str	r6, [r4, #8]
 8002660:	bfa4      	itt	ge
 8002662:	f021 0104 	bicge.w	r1, r1, #4
 8002666:	6021      	strge	r1, [r4, #0]
 8002668:	b90d      	cbnz	r5, 800266e <_printf_i+0x112>
 800266a:	2e00      	cmp	r6, #0
 800266c:	d04b      	beq.n	8002706 <_printf_i+0x1aa>
 800266e:	4616      	mov	r6, r2
 8002670:	fbb5 f1f3 	udiv	r1, r5, r3
 8002674:	fb03 5711 	mls	r7, r3, r1, r5
 8002678:	5dc7      	ldrb	r7, [r0, r7]
 800267a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800267e:	462f      	mov	r7, r5
 8002680:	42bb      	cmp	r3, r7
 8002682:	460d      	mov	r5, r1
 8002684:	d9f4      	bls.n	8002670 <_printf_i+0x114>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d10b      	bne.n	80026a2 <_printf_i+0x146>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	07df      	lsls	r7, r3, #31
 800268e:	d508      	bpl.n	80026a2 <_printf_i+0x146>
 8002690:	6923      	ldr	r3, [r4, #16]
 8002692:	6861      	ldr	r1, [r4, #4]
 8002694:	4299      	cmp	r1, r3
 8002696:	bfde      	ittt	le
 8002698:	2330      	movle	r3, #48	@ 0x30
 800269a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800269e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026a2:	1b92      	subs	r2, r2, r6
 80026a4:	6122      	str	r2, [r4, #16]
 80026a6:	464b      	mov	r3, r9
 80026a8:	4621      	mov	r1, r4
 80026aa:	4640      	mov	r0, r8
 80026ac:	f8cd a000 	str.w	sl, [sp]
 80026b0:	aa03      	add	r2, sp, #12
 80026b2:	f7ff fee1 	bl	8002478 <_printf_common>
 80026b6:	3001      	adds	r0, #1
 80026b8:	d14a      	bne.n	8002750 <_printf_i+0x1f4>
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295
 80026be:	b004      	add	sp, #16
 80026c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	f043 0320 	orr.w	r3, r3, #32
 80026ca:	6023      	str	r3, [r4, #0]
 80026cc:	2778      	movs	r7, #120	@ 0x78
 80026ce:	4832      	ldr	r0, [pc, #200]	@ (8002798 <_printf_i+0x23c>)
 80026d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	6831      	ldr	r1, [r6, #0]
 80026d8:	061f      	lsls	r7, r3, #24
 80026da:	f851 5b04 	ldr.w	r5, [r1], #4
 80026de:	d402      	bmi.n	80026e6 <_printf_i+0x18a>
 80026e0:	065f      	lsls	r7, r3, #25
 80026e2:	bf48      	it	mi
 80026e4:	b2ad      	uxthmi	r5, r5
 80026e6:	6031      	str	r1, [r6, #0]
 80026e8:	07d9      	lsls	r1, r3, #31
 80026ea:	bf44      	itt	mi
 80026ec:	f043 0320 	orrmi.w	r3, r3, #32
 80026f0:	6023      	strmi	r3, [r4, #0]
 80026f2:	b11d      	cbz	r5, 80026fc <_printf_i+0x1a0>
 80026f4:	2310      	movs	r3, #16
 80026f6:	e7ab      	b.n	8002650 <_printf_i+0xf4>
 80026f8:	4826      	ldr	r0, [pc, #152]	@ (8002794 <_printf_i+0x238>)
 80026fa:	e7e9      	b.n	80026d0 <_printf_i+0x174>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	f023 0320 	bic.w	r3, r3, #32
 8002702:	6023      	str	r3, [r4, #0]
 8002704:	e7f6      	b.n	80026f4 <_printf_i+0x198>
 8002706:	4616      	mov	r6, r2
 8002708:	e7bd      	b.n	8002686 <_printf_i+0x12a>
 800270a:	6833      	ldr	r3, [r6, #0]
 800270c:	6825      	ldr	r5, [r4, #0]
 800270e:	1d18      	adds	r0, r3, #4
 8002710:	6961      	ldr	r1, [r4, #20]
 8002712:	6030      	str	r0, [r6, #0]
 8002714:	062e      	lsls	r6, r5, #24
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	d501      	bpl.n	800271e <_printf_i+0x1c2>
 800271a:	6019      	str	r1, [r3, #0]
 800271c:	e002      	b.n	8002724 <_printf_i+0x1c8>
 800271e:	0668      	lsls	r0, r5, #25
 8002720:	d5fb      	bpl.n	800271a <_printf_i+0x1be>
 8002722:	8019      	strh	r1, [r3, #0]
 8002724:	2300      	movs	r3, #0
 8002726:	4616      	mov	r6, r2
 8002728:	6123      	str	r3, [r4, #16]
 800272a:	e7bc      	b.n	80026a6 <_printf_i+0x14a>
 800272c:	6833      	ldr	r3, [r6, #0]
 800272e:	2100      	movs	r1, #0
 8002730:	1d1a      	adds	r2, r3, #4
 8002732:	6032      	str	r2, [r6, #0]
 8002734:	681e      	ldr	r6, [r3, #0]
 8002736:	6862      	ldr	r2, [r4, #4]
 8002738:	4630      	mov	r0, r6
 800273a:	f000 fdd9 	bl	80032f0 <memchr>
 800273e:	b108      	cbz	r0, 8002744 <_printf_i+0x1e8>
 8002740:	1b80      	subs	r0, r0, r6
 8002742:	6060      	str	r0, [r4, #4]
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	6123      	str	r3, [r4, #16]
 8002748:	2300      	movs	r3, #0
 800274a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800274e:	e7aa      	b.n	80026a6 <_printf_i+0x14a>
 8002750:	4632      	mov	r2, r6
 8002752:	4649      	mov	r1, r9
 8002754:	4640      	mov	r0, r8
 8002756:	6923      	ldr	r3, [r4, #16]
 8002758:	47d0      	blx	sl
 800275a:	3001      	adds	r0, #1
 800275c:	d0ad      	beq.n	80026ba <_printf_i+0x15e>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	079b      	lsls	r3, r3, #30
 8002762:	d413      	bmi.n	800278c <_printf_i+0x230>
 8002764:	68e0      	ldr	r0, [r4, #12]
 8002766:	9b03      	ldr	r3, [sp, #12]
 8002768:	4298      	cmp	r0, r3
 800276a:	bfb8      	it	lt
 800276c:	4618      	movlt	r0, r3
 800276e:	e7a6      	b.n	80026be <_printf_i+0x162>
 8002770:	2301      	movs	r3, #1
 8002772:	4632      	mov	r2, r6
 8002774:	4649      	mov	r1, r9
 8002776:	4640      	mov	r0, r8
 8002778:	47d0      	blx	sl
 800277a:	3001      	adds	r0, #1
 800277c:	d09d      	beq.n	80026ba <_printf_i+0x15e>
 800277e:	3501      	adds	r5, #1
 8002780:	68e3      	ldr	r3, [r4, #12]
 8002782:	9903      	ldr	r1, [sp, #12]
 8002784:	1a5b      	subs	r3, r3, r1
 8002786:	42ab      	cmp	r3, r5
 8002788:	dcf2      	bgt.n	8002770 <_printf_i+0x214>
 800278a:	e7eb      	b.n	8002764 <_printf_i+0x208>
 800278c:	2500      	movs	r5, #0
 800278e:	f104 0619 	add.w	r6, r4, #25
 8002792:	e7f5      	b.n	8002780 <_printf_i+0x224>
 8002794:	08003621 	.word	0x08003621
 8002798:	08003632 	.word	0x08003632

0800279c <__svfiscanf_r>:
 800279c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a0:	461d      	mov	r5, r3
 80027a2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80027a4:	4606      	mov	r6, r0
 80027a6:	07df      	lsls	r7, r3, #31
 80027a8:	460c      	mov	r4, r1
 80027aa:	4691      	mov	r9, r2
 80027ac:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80027b0:	d405      	bmi.n	80027be <__svfiscanf_r+0x22>
 80027b2:	898b      	ldrh	r3, [r1, #12]
 80027b4:	0598      	lsls	r0, r3, #22
 80027b6:	d402      	bmi.n	80027be <__svfiscanf_r+0x22>
 80027b8:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80027ba:	f7ff fc24 	bl	8002006 <__retarget_lock_acquire_recursive>
 80027be:	2300      	movs	r3, #0
 80027c0:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80027c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002a64 <__svfiscanf_r+0x2c8>)
 80027c6:	f10d 0804 	add.w	r8, sp, #4
 80027ca:	93a0      	str	r3, [sp, #640]	@ 0x280
 80027cc:	4ba6      	ldr	r3, [pc, #664]	@ (8002a68 <__svfiscanf_r+0x2cc>)
 80027ce:	4fa7      	ldr	r7, [pc, #668]	@ (8002a6c <__svfiscanf_r+0x2d0>)
 80027d0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80027d4:	93a1      	str	r3, [sp, #644]	@ 0x284
 80027d6:	9500      	str	r5, [sp, #0]
 80027d8:	f899 3000 	ldrb.w	r3, [r9]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 816c 	beq.w	8002aba <__svfiscanf_r+0x31e>
 80027e2:	5cf9      	ldrb	r1, [r7, r3]
 80027e4:	f109 0501 	add.w	r5, r9, #1
 80027e8:	f011 0108 	ands.w	r1, r1, #8
 80027ec:	d019      	beq.n	8002822 <__svfiscanf_r+0x86>
 80027ee:	6863      	ldr	r3, [r4, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dd0f      	ble.n	8002814 <__svfiscanf_r+0x78>
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	5cba      	ldrb	r2, [r7, r2]
 80027fa:	0711      	lsls	r1, r2, #28
 80027fc:	d401      	bmi.n	8002802 <__svfiscanf_r+0x66>
 80027fe:	46a9      	mov	r9, r5
 8002800:	e7ea      	b.n	80027d8 <__svfiscanf_r+0x3c>
 8002802:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002804:	3301      	adds	r3, #1
 8002806:	3201      	adds	r2, #1
 8002808:	9245      	str	r2, [sp, #276]	@ 0x114
 800280a:	6862      	ldr	r2, [r4, #4]
 800280c:	6023      	str	r3, [r4, #0]
 800280e:	3a01      	subs	r2, #1
 8002810:	6062      	str	r2, [r4, #4]
 8002812:	e7ec      	b.n	80027ee <__svfiscanf_r+0x52>
 8002814:	4621      	mov	r1, r4
 8002816:	4630      	mov	r0, r6
 8002818:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800281a:	4798      	blx	r3
 800281c:	2800      	cmp	r0, #0
 800281e:	d0e9      	beq.n	80027f4 <__svfiscanf_r+0x58>
 8002820:	e7ed      	b.n	80027fe <__svfiscanf_r+0x62>
 8002822:	2b25      	cmp	r3, #37	@ 0x25
 8002824:	d012      	beq.n	800284c <__svfiscanf_r+0xb0>
 8002826:	4699      	mov	r9, r3
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f340 8095 	ble.w	800295a <__svfiscanf_r+0x1be>
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	7813      	ldrb	r3, [r2, #0]
 8002834:	454b      	cmp	r3, r9
 8002836:	f040 8140 	bne.w	8002aba <__svfiscanf_r+0x31e>
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	3201      	adds	r2, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	6063      	str	r3, [r4, #4]
 8002842:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8002844:	6022      	str	r2, [r4, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	9345      	str	r3, [sp, #276]	@ 0x114
 800284a:	e7d8      	b.n	80027fe <__svfiscanf_r+0x62>
 800284c:	9141      	str	r1, [sp, #260]	@ 0x104
 800284e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002850:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002854:	220a      	movs	r2, #10
 8002856:	2b2a      	cmp	r3, #42	@ 0x2a
 8002858:	bf02      	ittt	eq
 800285a:	2310      	moveq	r3, #16
 800285c:	f109 0502 	addeq.w	r5, r9, #2
 8002860:	9341      	streq	r3, [sp, #260]	@ 0x104
 8002862:	46a9      	mov	r9, r5
 8002864:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002868:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800286c:	2b09      	cmp	r3, #9
 800286e:	d91f      	bls.n	80028b0 <__svfiscanf_r+0x114>
 8002870:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8002a70 <__svfiscanf_r+0x2d4>
 8002874:	2203      	movs	r2, #3
 8002876:	4650      	mov	r0, sl
 8002878:	f000 fd3a 	bl	80032f0 <memchr>
 800287c:	b138      	cbz	r0, 800288e <__svfiscanf_r+0xf2>
 800287e:	2301      	movs	r3, #1
 8002880:	464d      	mov	r5, r9
 8002882:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002884:	eba0 000a 	sub.w	r0, r0, sl
 8002888:	4083      	lsls	r3, r0
 800288a:	4313      	orrs	r3, r2
 800288c:	9341      	str	r3, [sp, #260]	@ 0x104
 800288e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002892:	2b78      	cmp	r3, #120	@ 0x78
 8002894:	d807      	bhi.n	80028a6 <__svfiscanf_r+0x10a>
 8002896:	2b57      	cmp	r3, #87	@ 0x57
 8002898:	d811      	bhi.n	80028be <__svfiscanf_r+0x122>
 800289a:	2b25      	cmp	r3, #37	@ 0x25
 800289c:	d0c3      	beq.n	8002826 <__svfiscanf_r+0x8a>
 800289e:	d857      	bhi.n	8002950 <__svfiscanf_r+0x1b4>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80c1 	beq.w	8002a28 <__svfiscanf_r+0x28c>
 80028a6:	2303      	movs	r3, #3
 80028a8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80028aa:	230a      	movs	r3, #10
 80028ac:	9342      	str	r3, [sp, #264]	@ 0x108
 80028ae:	e07e      	b.n	80029ae <__svfiscanf_r+0x212>
 80028b0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80028b2:	464d      	mov	r5, r9
 80028b4:	fb02 1103 	mla	r1, r2, r3, r1
 80028b8:	3930      	subs	r1, #48	@ 0x30
 80028ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80028bc:	e7d1      	b.n	8002862 <__svfiscanf_r+0xc6>
 80028be:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80028c2:	2a20      	cmp	r2, #32
 80028c4:	d8ef      	bhi.n	80028a6 <__svfiscanf_r+0x10a>
 80028c6:	a101      	add	r1, pc, #4	@ (adr r1, 80028cc <__svfiscanf_r+0x130>)
 80028c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80028cc:	0800298d 	.word	0x0800298d
 80028d0:	080028a7 	.word	0x080028a7
 80028d4:	080028a7 	.word	0x080028a7
 80028d8:	080029e7 	.word	0x080029e7
 80028dc:	080028a7 	.word	0x080028a7
 80028e0:	080028a7 	.word	0x080028a7
 80028e4:	080028a7 	.word	0x080028a7
 80028e8:	080028a7 	.word	0x080028a7
 80028ec:	080028a7 	.word	0x080028a7
 80028f0:	080028a7 	.word	0x080028a7
 80028f4:	080028a7 	.word	0x080028a7
 80028f8:	080029fd 	.word	0x080029fd
 80028fc:	080029e3 	.word	0x080029e3
 8002900:	08002957 	.word	0x08002957
 8002904:	08002957 	.word	0x08002957
 8002908:	08002957 	.word	0x08002957
 800290c:	080028a7 	.word	0x080028a7
 8002910:	0800299f 	.word	0x0800299f
 8002914:	080028a7 	.word	0x080028a7
 8002918:	080028a7 	.word	0x080028a7
 800291c:	080028a7 	.word	0x080028a7
 8002920:	080028a7 	.word	0x080028a7
 8002924:	08002a0d 	.word	0x08002a0d
 8002928:	080029a7 	.word	0x080029a7
 800292c:	08002985 	.word	0x08002985
 8002930:	080028a7 	.word	0x080028a7
 8002934:	080028a7 	.word	0x080028a7
 8002938:	08002a09 	.word	0x08002a09
 800293c:	080028a7 	.word	0x080028a7
 8002940:	080029e3 	.word	0x080029e3
 8002944:	080028a7 	.word	0x080028a7
 8002948:	080028a7 	.word	0x080028a7
 800294c:	0800298d 	.word	0x0800298d
 8002950:	3b45      	subs	r3, #69	@ 0x45
 8002952:	2b02      	cmp	r3, #2
 8002954:	d8a7      	bhi.n	80028a6 <__svfiscanf_r+0x10a>
 8002956:	2305      	movs	r3, #5
 8002958:	e028      	b.n	80029ac <__svfiscanf_r+0x210>
 800295a:	4621      	mov	r1, r4
 800295c:	4630      	mov	r0, r6
 800295e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002960:	4798      	blx	r3
 8002962:	2800      	cmp	r0, #0
 8002964:	f43f af64 	beq.w	8002830 <__svfiscanf_r+0x94>
 8002968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800296a:	07da      	lsls	r2, r3, #31
 800296c:	f140 809d 	bpl.w	8002aaa <__svfiscanf_r+0x30e>
 8002970:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002972:	2800      	cmp	r0, #0
 8002974:	d061      	beq.n	8002a3a <__svfiscanf_r+0x29e>
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	0659      	lsls	r1, r3, #25
 800297a:	d45e      	bmi.n	8002a3a <__svfiscanf_r+0x29e>
 800297c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8002980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002984:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	9241      	str	r2, [sp, #260]	@ 0x104
 800298c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	9241      	str	r2, [sp, #260]	@ 0x104
 8002994:	2210      	movs	r2, #16
 8002996:	2b6e      	cmp	r3, #110	@ 0x6e
 8002998:	9242      	str	r2, [sp, #264]	@ 0x108
 800299a:	d902      	bls.n	80029a2 <__svfiscanf_r+0x206>
 800299c:	e005      	b.n	80029aa <__svfiscanf_r+0x20e>
 800299e:	2300      	movs	r3, #0
 80029a0:	9342      	str	r3, [sp, #264]	@ 0x108
 80029a2:	2303      	movs	r3, #3
 80029a4:	e002      	b.n	80029ac <__svfiscanf_r+0x210>
 80029a6:	2308      	movs	r3, #8
 80029a8:	9342      	str	r3, [sp, #264]	@ 0x108
 80029aa:	2304      	movs	r3, #4
 80029ac:	9347      	str	r3, [sp, #284]	@ 0x11c
 80029ae:	6863      	ldr	r3, [r4, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	dd45      	ble.n	8002a40 <__svfiscanf_r+0x2a4>
 80029b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80029b6:	0659      	lsls	r1, r3, #25
 80029b8:	d404      	bmi.n	80029c4 <__svfiscanf_r+0x228>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	5cba      	ldrb	r2, [r7, r2]
 80029c0:	0712      	lsls	r2, r2, #28
 80029c2:	d444      	bmi.n	8002a4e <__svfiscanf_r+0x2b2>
 80029c4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	dc5b      	bgt.n	8002a82 <__svfiscanf_r+0x2e6>
 80029ca:	466b      	mov	r3, sp
 80029cc:	4622      	mov	r2, r4
 80029ce:	4630      	mov	r0, r6
 80029d0:	a941      	add	r1, sp, #260	@ 0x104
 80029d2:	f000 f893 	bl	8002afc <_scanf_chars>
 80029d6:	2801      	cmp	r0, #1
 80029d8:	d06f      	beq.n	8002aba <__svfiscanf_r+0x31e>
 80029da:	2802      	cmp	r0, #2
 80029dc:	f47f af0f 	bne.w	80027fe <__svfiscanf_r+0x62>
 80029e0:	e7c2      	b.n	8002968 <__svfiscanf_r+0x1cc>
 80029e2:	220a      	movs	r2, #10
 80029e4:	e7d7      	b.n	8002996 <__svfiscanf_r+0x1fa>
 80029e6:	4629      	mov	r1, r5
 80029e8:	4640      	mov	r0, r8
 80029ea:	f000 fb5f 	bl	80030ac <__sccl>
 80029ee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80029f0:	4605      	mov	r5, r0
 80029f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80029f8:	2301      	movs	r3, #1
 80029fa:	e7d7      	b.n	80029ac <__svfiscanf_r+0x210>
 80029fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80029fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a02:	9341      	str	r3, [sp, #260]	@ 0x104
 8002a04:	2300      	movs	r3, #0
 8002a06:	e7d1      	b.n	80029ac <__svfiscanf_r+0x210>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e7cf      	b.n	80029ac <__svfiscanf_r+0x210>
 8002a0c:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8002a0e:	06c3      	lsls	r3, r0, #27
 8002a10:	f53f aef5 	bmi.w	80027fe <__svfiscanf_r+0x62>
 8002a14:	9b00      	ldr	r3, [sp, #0]
 8002a16:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002a18:	1d19      	adds	r1, r3, #4
 8002a1a:	9100      	str	r1, [sp, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	07c0      	lsls	r0, r0, #31
 8002a20:	bf4c      	ite	mi
 8002a22:	801a      	strhmi	r2, [r3, #0]
 8002a24:	601a      	strpl	r2, [r3, #0]
 8002a26:	e6ea      	b.n	80027fe <__svfiscanf_r+0x62>
 8002a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a2a:	07de      	lsls	r6, r3, #31
 8002a2c:	d405      	bmi.n	8002a3a <__svfiscanf_r+0x29e>
 8002a2e:	89a3      	ldrh	r3, [r4, #12]
 8002a30:	059d      	lsls	r5, r3, #22
 8002a32:	d402      	bmi.n	8002a3a <__svfiscanf_r+0x29e>
 8002a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a36:	f7ff fae7 	bl	8002008 <__retarget_lock_release_recursive>
 8002a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3e:	e79d      	b.n	800297c <__svfiscanf_r+0x1e0>
 8002a40:	4621      	mov	r1, r4
 8002a42:	4630      	mov	r0, r6
 8002a44:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002a46:	4798      	blx	r3
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d0b3      	beq.n	80029b4 <__svfiscanf_r+0x218>
 8002a4c:	e78c      	b.n	8002968 <__svfiscanf_r+0x1cc>
 8002a4e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002a50:	3201      	adds	r2, #1
 8002a52:	9245      	str	r2, [sp, #276]	@ 0x114
 8002a54:	6862      	ldr	r2, [r4, #4]
 8002a56:	3a01      	subs	r2, #1
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	6062      	str	r2, [r4, #4]
 8002a5c:	dd0a      	ble.n	8002a74 <__svfiscanf_r+0x2d8>
 8002a5e:	3301      	adds	r3, #1
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	e7aa      	b.n	80029ba <__svfiscanf_r+0x21e>
 8002a64:	0800318f 	.word	0x0800318f
 8002a68:	08002fc5 	.word	0x08002fc5
 8002a6c:	0800365f 	.word	0x0800365f
 8002a70:	08003616 	.word	0x08003616
 8002a74:	4621      	mov	r1, r4
 8002a76:	4630      	mov	r0, r6
 8002a78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002a7a:	4798      	blx	r3
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d09c      	beq.n	80029ba <__svfiscanf_r+0x21e>
 8002a80:	e772      	b.n	8002968 <__svfiscanf_r+0x1cc>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	dc06      	bgt.n	8002a94 <__svfiscanf_r+0x2f8>
 8002a86:	466b      	mov	r3, sp
 8002a88:	4622      	mov	r2, r4
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	a941      	add	r1, sp, #260	@ 0x104
 8002a8e:	f000 f88f 	bl	8002bb0 <_scanf_i>
 8002a92:	e7a0      	b.n	80029d6 <__svfiscanf_r+0x23a>
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <__svfiscanf_r+0x334>)
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f43f aeb1 	beq.w	80027fe <__svfiscanf_r+0x62>
 8002a9c:	466b      	mov	r3, sp
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	a941      	add	r1, sp, #260	@ 0x104
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	e795      	b.n	80029d6 <__svfiscanf_r+0x23a>
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	0598      	lsls	r0, r3, #22
 8002aae:	f53f af5f 	bmi.w	8002970 <__svfiscanf_r+0x1d4>
 8002ab2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ab4:	f7ff faa8 	bl	8002008 <__retarget_lock_release_recursive>
 8002ab8:	e75a      	b.n	8002970 <__svfiscanf_r+0x1d4>
 8002aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002abc:	07da      	lsls	r2, r3, #31
 8002abe:	d405      	bmi.n	8002acc <__svfiscanf_r+0x330>
 8002ac0:	89a3      	ldrh	r3, [r4, #12]
 8002ac2:	059b      	lsls	r3, r3, #22
 8002ac4:	d402      	bmi.n	8002acc <__svfiscanf_r+0x330>
 8002ac6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ac8:	f7ff fa9e 	bl	8002008 <__retarget_lock_release_recursive>
 8002acc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002ace:	e755      	b.n	800297c <__svfiscanf_r+0x1e0>
 8002ad0:	00000000 	.word	0x00000000

08002ad4 <_vfiscanf_r>:
 8002ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad8:	460d      	mov	r5, r1
 8002ada:	4616      	mov	r6, r2
 8002adc:	461f      	mov	r7, r3
 8002ade:	4604      	mov	r4, r0
 8002ae0:	b118      	cbz	r0, 8002aea <_vfiscanf_r+0x16>
 8002ae2:	6a03      	ldr	r3, [r0, #32]
 8002ae4:	b90b      	cbnz	r3, 8002aea <_vfiscanf_r+0x16>
 8002ae6:	f7ff f885 	bl	8001bf4 <__sinit>
 8002aea:	463b      	mov	r3, r7
 8002aec:	4632      	mov	r2, r6
 8002aee:	4629      	mov	r1, r5
 8002af0:	4620      	mov	r0, r4
 8002af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002af6:	f7ff be51 	b.w	800279c <__svfiscanf_r>
	...

08002afc <_scanf_chars>:
 8002afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b00:	4615      	mov	r5, r2
 8002b02:	688a      	ldr	r2, [r1, #8]
 8002b04:	4680      	mov	r8, r0
 8002b06:	460c      	mov	r4, r1
 8002b08:	b932      	cbnz	r2, 8002b18 <_scanf_chars+0x1c>
 8002b0a:	698a      	ldr	r2, [r1, #24]
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	f04f 32ff 	movne.w	r2, #4294967295
 8002b14:	2201      	moveq	r2, #1
 8002b16:	608a      	str	r2, [r1, #8]
 8002b18:	2700      	movs	r7, #0
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8002bac <_scanf_chars+0xb0>
 8002b20:	06d1      	lsls	r1, r2, #27
 8002b22:	bf5f      	itttt	pl
 8002b24:	681a      	ldrpl	r2, [r3, #0]
 8002b26:	1d11      	addpl	r1, r2, #4
 8002b28:	6019      	strpl	r1, [r3, #0]
 8002b2a:	6816      	ldrpl	r6, [r2, #0]
 8002b2c:	69a0      	ldr	r0, [r4, #24]
 8002b2e:	b188      	cbz	r0, 8002b54 <_scanf_chars+0x58>
 8002b30:	2801      	cmp	r0, #1
 8002b32:	d107      	bne.n	8002b44 <_scanf_chars+0x48>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	6963      	ldr	r3, [r4, #20]
 8002b3a:	5c9b      	ldrb	r3, [r3, r2]
 8002b3c:	b953      	cbnz	r3, 8002b54 <_scanf_chars+0x58>
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d031      	beq.n	8002ba6 <_scanf_chars+0xaa>
 8002b42:	e022      	b.n	8002b8a <_scanf_chars+0x8e>
 8002b44:	2802      	cmp	r0, #2
 8002b46:	d120      	bne.n	8002b8a <_scanf_chars+0x8e>
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002b50:	071b      	lsls	r3, r3, #28
 8002b52:	d41a      	bmi.n	8002b8a <_scanf_chars+0x8e>
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	3701      	adds	r7, #1
 8002b58:	06da      	lsls	r2, r3, #27
 8002b5a:	bf5e      	ittt	pl
 8002b5c:	682b      	ldrpl	r3, [r5, #0]
 8002b5e:	781b      	ldrbpl	r3, [r3, #0]
 8002b60:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002b64:	682a      	ldr	r2, [r5, #0]
 8002b66:	686b      	ldr	r3, [r5, #4]
 8002b68:	3201      	adds	r2, #1
 8002b6a:	602a      	str	r2, [r5, #0]
 8002b6c:	68a2      	ldr	r2, [r4, #8]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	3a01      	subs	r2, #1
 8002b72:	606b      	str	r3, [r5, #4]
 8002b74:	60a2      	str	r2, [r4, #8]
 8002b76:	b142      	cbz	r2, 8002b8a <_scanf_chars+0x8e>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	dcd7      	bgt.n	8002b2c <_scanf_chars+0x30>
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4640      	mov	r0, r8
 8002b80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002b84:	4798      	blx	r3
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d0d0      	beq.n	8002b2c <_scanf_chars+0x30>
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	f013 0310 	ands.w	r3, r3, #16
 8002b90:	d105      	bne.n	8002b9e <_scanf_chars+0xa2>
 8002b92:	68e2      	ldr	r2, [r4, #12]
 8002b94:	3201      	adds	r2, #1
 8002b96:	60e2      	str	r2, [r4, #12]
 8002b98:	69a2      	ldr	r2, [r4, #24]
 8002b9a:	b102      	cbz	r2, 8002b9e <_scanf_chars+0xa2>
 8002b9c:	7033      	strb	r3, [r6, #0]
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	443b      	add	r3, r7
 8002ba4:	6123      	str	r3, [r4, #16]
 8002ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002baa:	bf00      	nop
 8002bac:	0800365f 	.word	0x0800365f

08002bb0 <_scanf_i>:
 8002bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	4698      	mov	r8, r3
 8002bb8:	4b72      	ldr	r3, [pc, #456]	@ (8002d84 <_scanf_i+0x1d4>)
 8002bba:	b087      	sub	sp, #28
 8002bbc:	4682      	mov	sl, r0
 8002bbe:	4616      	mov	r6, r2
 8002bc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bc4:	ab03      	add	r3, sp, #12
 8002bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bca:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <_scanf_i+0x1d8>)
 8002bcc:	69a1      	ldr	r1, [r4, #24]
 8002bce:	4a6f      	ldr	r2, [pc, #444]	@ (8002d8c <_scanf_i+0x1dc>)
 8002bd0:	4627      	mov	r7, r4
 8002bd2:	2903      	cmp	r1, #3
 8002bd4:	bf08      	it	eq
 8002bd6:	461a      	moveq	r2, r3
 8002bd8:	68a3      	ldr	r3, [r4, #8]
 8002bda:	9201      	str	r2, [sp, #4]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002be2:	bf81      	itttt	hi
 8002be4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002be8:	eb03 0905 	addhi.w	r9, r3, r5
 8002bec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002bf0:	60a3      	strhi	r3, [r4, #8]
 8002bf2:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002bf6:	bf98      	it	ls
 8002bf8:	f04f 0900 	movls.w	r9, #0
 8002bfc:	463d      	mov	r5, r7
 8002bfe:	f04f 0b00 	mov.w	fp, #0
 8002c02:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8002c06:	6023      	str	r3, [r4, #0]
 8002c08:	6831      	ldr	r1, [r6, #0]
 8002c0a:	ab03      	add	r3, sp, #12
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	7809      	ldrb	r1, [r1, #0]
 8002c10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002c14:	f000 fb6c 	bl	80032f0 <memchr>
 8002c18:	b328      	cbz	r0, 8002c66 <_scanf_i+0xb6>
 8002c1a:	f1bb 0f01 	cmp.w	fp, #1
 8002c1e:	d159      	bne.n	8002cd4 <_scanf_i+0x124>
 8002c20:	6862      	ldr	r2, [r4, #4]
 8002c22:	b92a      	cbnz	r2, 8002c30 <_scanf_i+0x80>
 8002c24:	2108      	movs	r1, #8
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	6061      	str	r1, [r4, #4]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2e:	6022      	str	r2, [r4, #0]
 8002c30:	6822      	ldr	r2, [r4, #0]
 8002c32:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8002c36:	6022      	str	r2, [r4, #0]
 8002c38:	68a2      	ldr	r2, [r4, #8]
 8002c3a:	1e51      	subs	r1, r2, #1
 8002c3c:	60a1      	str	r1, [r4, #8]
 8002c3e:	b192      	cbz	r2, 8002c66 <_scanf_i+0xb6>
 8002c40:	6832      	ldr	r2, [r6, #0]
 8002c42:	1c51      	adds	r1, r2, #1
 8002c44:	6031      	str	r1, [r6, #0]
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	f805 2b01 	strb.w	r2, [r5], #1
 8002c4c:	6872      	ldr	r2, [r6, #4]
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	6072      	str	r2, [r6, #4]
 8002c54:	dc07      	bgt.n	8002c66 <_scanf_i+0xb6>
 8002c56:	4631      	mov	r1, r6
 8002c58:	4650      	mov	r0, sl
 8002c5a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8002c5e:	4790      	blx	r2
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f040 8085 	bne.w	8002d70 <_scanf_i+0x1c0>
 8002c66:	f10b 0b01 	add.w	fp, fp, #1
 8002c6a:	f1bb 0f03 	cmp.w	fp, #3
 8002c6e:	d1cb      	bne.n	8002c08 <_scanf_i+0x58>
 8002c70:	6863      	ldr	r3, [r4, #4]
 8002c72:	b90b      	cbnz	r3, 8002c78 <_scanf_i+0xc8>
 8002c74:	230a      	movs	r3, #10
 8002c76:	6063      	str	r3, [r4, #4]
 8002c78:	6863      	ldr	r3, [r4, #4]
 8002c7a:	4945      	ldr	r1, [pc, #276]	@ (8002d90 <_scanf_i+0x1e0>)
 8002c7c:	6960      	ldr	r0, [r4, #20]
 8002c7e:	1ac9      	subs	r1, r1, r3
 8002c80:	f000 fa14 	bl	80030ac <__sccl>
 8002c84:	f04f 0b00 	mov.w	fp, #0
 8002c88:	68a3      	ldr	r3, [r4, #8]
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03d      	beq.n	8002d0c <_scanf_i+0x15c>
 8002c90:	6831      	ldr	r1, [r6, #0]
 8002c92:	6960      	ldr	r0, [r4, #20]
 8002c94:	f891 c000 	ldrb.w	ip, [r1]
 8002c98:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d035      	beq.n	8002d0c <_scanf_i+0x15c>
 8002ca0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8002ca4:	d124      	bne.n	8002cf0 <_scanf_i+0x140>
 8002ca6:	0510      	lsls	r0, r2, #20
 8002ca8:	d522      	bpl.n	8002cf0 <_scanf_i+0x140>
 8002caa:	f10b 0b01 	add.w	fp, fp, #1
 8002cae:	f1b9 0f00 	cmp.w	r9, #0
 8002cb2:	d003      	beq.n	8002cbc <_scanf_i+0x10c>
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8002cba:	60a3      	str	r3, [r4, #8]
 8002cbc:	6873      	ldr	r3, [r6, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	6073      	str	r3, [r6, #4]
 8002cc4:	dd1b      	ble.n	8002cfe <_scanf_i+0x14e>
 8002cc6:	6833      	ldr	r3, [r6, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	6033      	str	r3, [r6, #0]
 8002ccc:	68a3      	ldr	r3, [r4, #8]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	60a3      	str	r3, [r4, #8]
 8002cd2:	e7d9      	b.n	8002c88 <_scanf_i+0xd8>
 8002cd4:	f1bb 0f02 	cmp.w	fp, #2
 8002cd8:	d1ae      	bne.n	8002c38 <_scanf_i+0x88>
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8002ce0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002ce4:	d1bf      	bne.n	8002c66 <_scanf_i+0xb6>
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cec:	6061      	str	r1, [r4, #4]
 8002cee:	e7a2      	b.n	8002c36 <_scanf_i+0x86>
 8002cf0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8002cf4:	6022      	str	r2, [r4, #0]
 8002cf6:	780b      	ldrb	r3, [r1, #0]
 8002cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8002cfc:	e7de      	b.n	8002cbc <_scanf_i+0x10c>
 8002cfe:	4631      	mov	r1, r6
 8002d00:	4650      	mov	r0, sl
 8002d02:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002d06:	4798      	blx	r3
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d0df      	beq.n	8002ccc <_scanf_i+0x11c>
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	05d9      	lsls	r1, r3, #23
 8002d10:	d50d      	bpl.n	8002d2e <_scanf_i+0x17e>
 8002d12:	42bd      	cmp	r5, r7
 8002d14:	d909      	bls.n	8002d2a <_scanf_i+0x17a>
 8002d16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	4650      	mov	r0, sl
 8002d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002d22:	f105 39ff 	add.w	r9, r5, #4294967295
 8002d26:	4798      	blx	r3
 8002d28:	464d      	mov	r5, r9
 8002d2a:	42bd      	cmp	r5, r7
 8002d2c:	d028      	beq.n	8002d80 <_scanf_i+0x1d0>
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	f012 0210 	ands.w	r2, r2, #16
 8002d34:	d113      	bne.n	8002d5e <_scanf_i+0x1ae>
 8002d36:	702a      	strb	r2, [r5, #0]
 8002d38:	4639      	mov	r1, r7
 8002d3a:	6863      	ldr	r3, [r4, #4]
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	9e01      	ldr	r6, [sp, #4]
 8002d40:	47b0      	blx	r6
 8002d42:	f8d8 3000 	ldr.w	r3, [r8]
 8002d46:	6821      	ldr	r1, [r4, #0]
 8002d48:	1d1a      	adds	r2, r3, #4
 8002d4a:	f8c8 2000 	str.w	r2, [r8]
 8002d4e:	f011 0f20 	tst.w	r1, #32
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	d00f      	beq.n	8002d76 <_scanf_i+0x1c6>
 8002d56:	6018      	str	r0, [r3, #0]
 8002d58:	68e3      	ldr	r3, [r4, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60e3      	str	r3, [r4, #12]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	1bed      	subs	r5, r5, r7
 8002d64:	445d      	add	r5, fp
 8002d66:	442b      	add	r3, r5
 8002d68:	6123      	str	r3, [r4, #16]
 8002d6a:	b007      	add	sp, #28
 8002d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d70:	f04f 0b00 	mov.w	fp, #0
 8002d74:	e7ca      	b.n	8002d0c <_scanf_i+0x15c>
 8002d76:	07ca      	lsls	r2, r1, #31
 8002d78:	bf4c      	ite	mi
 8002d7a:	8018      	strhmi	r0, [r3, #0]
 8002d7c:	6018      	strpl	r0, [r3, #0]
 8002d7e:	e7eb      	b.n	8002d58 <_scanf_i+0x1a8>
 8002d80:	2001      	movs	r0, #1
 8002d82:	e7f2      	b.n	8002d6a <_scanf_i+0x1ba>
 8002d84:	080035c0 	.word	0x080035c0
 8002d88:	08003479 	.word	0x08003479
 8002d8c:	08003559 	.word	0x08003559
 8002d90:	08003653 	.word	0x08003653

08002d94 <__sflush_r>:
 8002d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9a:	0716      	lsls	r6, r2, #28
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	d454      	bmi.n	8002e4c <__sflush_r+0xb8>
 8002da2:	684b      	ldr	r3, [r1, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	dc02      	bgt.n	8002dae <__sflush_r+0x1a>
 8002da8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	dd48      	ble.n	8002e40 <__sflush_r+0xac>
 8002dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002db0:	2e00      	cmp	r6, #0
 8002db2:	d045      	beq.n	8002e40 <__sflush_r+0xac>
 8002db4:	2300      	movs	r3, #0
 8002db6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002dba:	682f      	ldr	r7, [r5, #0]
 8002dbc:	6a21      	ldr	r1, [r4, #32]
 8002dbe:	602b      	str	r3, [r5, #0]
 8002dc0:	d030      	beq.n	8002e24 <__sflush_r+0x90>
 8002dc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	0759      	lsls	r1, r3, #29
 8002dc8:	d505      	bpl.n	8002dd6 <__sflush_r+0x42>
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	1ad2      	subs	r2, r2, r3
 8002dce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002dd0:	b10b      	cbz	r3, 8002dd6 <__sflush_r+0x42>
 8002dd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dd4:	1ad2      	subs	r2, r2, r3
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4628      	mov	r0, r5
 8002dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ddc:	6a21      	ldr	r1, [r4, #32]
 8002dde:	47b0      	blx	r6
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	d106      	bne.n	8002df4 <__sflush_r+0x60>
 8002de6:	6829      	ldr	r1, [r5, #0]
 8002de8:	291d      	cmp	r1, #29
 8002dea:	d82b      	bhi.n	8002e44 <__sflush_r+0xb0>
 8002dec:	4a28      	ldr	r2, [pc, #160]	@ (8002e90 <__sflush_r+0xfc>)
 8002dee:	410a      	asrs	r2, r1
 8002df0:	07d6      	lsls	r6, r2, #31
 8002df2:	d427      	bmi.n	8002e44 <__sflush_r+0xb0>
 8002df4:	2200      	movs	r2, #0
 8002df6:	6062      	str	r2, [r4, #4]
 8002df8:	6922      	ldr	r2, [r4, #16]
 8002dfa:	04d9      	lsls	r1, r3, #19
 8002dfc:	6022      	str	r2, [r4, #0]
 8002dfe:	d504      	bpl.n	8002e0a <__sflush_r+0x76>
 8002e00:	1c42      	adds	r2, r0, #1
 8002e02:	d101      	bne.n	8002e08 <__sflush_r+0x74>
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	b903      	cbnz	r3, 8002e0a <__sflush_r+0x76>
 8002e08:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e0c:	602f      	str	r7, [r5, #0]
 8002e0e:	b1b9      	cbz	r1, 8002e40 <__sflush_r+0xac>
 8002e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e14:	4299      	cmp	r1, r3
 8002e16:	d002      	beq.n	8002e1e <__sflush_r+0x8a>
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f7ff f8f7 	bl	800200c <_free_r>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e22:	e00d      	b.n	8002e40 <__sflush_r+0xac>
 8002e24:	2301      	movs	r3, #1
 8002e26:	4628      	mov	r0, r5
 8002e28:	47b0      	blx	r6
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	1c50      	adds	r0, r2, #1
 8002e2e:	d1c9      	bne.n	8002dc4 <__sflush_r+0x30>
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0c6      	beq.n	8002dc4 <__sflush_r+0x30>
 8002e36:	2b1d      	cmp	r3, #29
 8002e38:	d001      	beq.n	8002e3e <__sflush_r+0xaa>
 8002e3a:	2b16      	cmp	r3, #22
 8002e3c:	d11d      	bne.n	8002e7a <__sflush_r+0xe6>
 8002e3e:	602f      	str	r7, [r5, #0]
 8002e40:	2000      	movs	r0, #0
 8002e42:	e021      	b.n	8002e88 <__sflush_r+0xf4>
 8002e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	e01a      	b.n	8002e82 <__sflush_r+0xee>
 8002e4c:	690f      	ldr	r7, [r1, #16]
 8002e4e:	2f00      	cmp	r7, #0
 8002e50:	d0f6      	beq.n	8002e40 <__sflush_r+0xac>
 8002e52:	0793      	lsls	r3, r2, #30
 8002e54:	bf18      	it	ne
 8002e56:	2300      	movne	r3, #0
 8002e58:	680e      	ldr	r6, [r1, #0]
 8002e5a:	bf08      	it	eq
 8002e5c:	694b      	ldreq	r3, [r1, #20]
 8002e5e:	1bf6      	subs	r6, r6, r7
 8002e60:	600f      	str	r7, [r1, #0]
 8002e62:	608b      	str	r3, [r1, #8]
 8002e64:	2e00      	cmp	r6, #0
 8002e66:	ddeb      	ble.n	8002e40 <__sflush_r+0xac>
 8002e68:	4633      	mov	r3, r6
 8002e6a:	463a      	mov	r2, r7
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	6a21      	ldr	r1, [r4, #32]
 8002e70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002e74:	47e0      	blx	ip
 8002e76:	2800      	cmp	r0, #0
 8002e78:	dc07      	bgt.n	8002e8a <__sflush_r+0xf6>
 8002e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	81a3      	strh	r3, [r4, #12]
 8002e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e8a:	4407      	add	r7, r0
 8002e8c:	1a36      	subs	r6, r6, r0
 8002e8e:	e7e9      	b.n	8002e64 <__sflush_r+0xd0>
 8002e90:	dfbffffe 	.word	0xdfbffffe

08002e94 <_fflush_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	690b      	ldr	r3, [r1, #16]
 8002e98:	4605      	mov	r5, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	b913      	cbnz	r3, 8002ea4 <_fflush_r+0x10>
 8002e9e:	2500      	movs	r5, #0
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	b118      	cbz	r0, 8002eae <_fflush_r+0x1a>
 8002ea6:	6a03      	ldr	r3, [r0, #32]
 8002ea8:	b90b      	cbnz	r3, 8002eae <_fflush_r+0x1a>
 8002eaa:	f7fe fea3 	bl	8001bf4 <__sinit>
 8002eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f3      	beq.n	8002e9e <_fflush_r+0xa>
 8002eb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002eb8:	07d0      	lsls	r0, r2, #31
 8002eba:	d404      	bmi.n	8002ec6 <_fflush_r+0x32>
 8002ebc:	0599      	lsls	r1, r3, #22
 8002ebe:	d402      	bmi.n	8002ec6 <_fflush_r+0x32>
 8002ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ec2:	f7ff f8a0 	bl	8002006 <__retarget_lock_acquire_recursive>
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	4621      	mov	r1, r4
 8002eca:	f7ff ff63 	bl	8002d94 <__sflush_r>
 8002ece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	07da      	lsls	r2, r3, #31
 8002ed4:	d4e4      	bmi.n	8002ea0 <_fflush_r+0xc>
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	059b      	lsls	r3, r3, #22
 8002eda:	d4e1      	bmi.n	8002ea0 <_fflush_r+0xc>
 8002edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ede:	f7ff f893 	bl	8002008 <__retarget_lock_release_recursive>
 8002ee2:	e7dd      	b.n	8002ea0 <_fflush_r+0xc>

08002ee4 <__swhatbuf_r>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eec:	4615      	mov	r5, r2
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	461e      	mov	r6, r3
 8002ef2:	b096      	sub	sp, #88	@ 0x58
 8002ef4:	da0c      	bge.n	8002f10 <__swhatbuf_r+0x2c>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	2100      	movs	r1, #0
 8002efa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002efe:	bf14      	ite	ne
 8002f00:	2340      	movne	r3, #64	@ 0x40
 8002f02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002f06:	2000      	movs	r0, #0
 8002f08:	6031      	str	r1, [r6, #0]
 8002f0a:	602b      	str	r3, [r5, #0]
 8002f0c:	b016      	add	sp, #88	@ 0x58
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	466a      	mov	r2, sp
 8002f12:	f000 f9bb 	bl	800328c <_fstat_r>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	dbed      	blt.n	8002ef6 <__swhatbuf_r+0x12>
 8002f1a:	9901      	ldr	r1, [sp, #4]
 8002f1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002f20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002f24:	4259      	negs	r1, r3
 8002f26:	4159      	adcs	r1, r3
 8002f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f2c:	e7eb      	b.n	8002f06 <__swhatbuf_r+0x22>

08002f2e <__smakebuf_r>:
 8002f2e:	898b      	ldrh	r3, [r1, #12]
 8002f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f32:	079d      	lsls	r5, r3, #30
 8002f34:	4606      	mov	r6, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	d507      	bpl.n	8002f4a <__smakebuf_r+0x1c>
 8002f3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002f3e:	6023      	str	r3, [r4, #0]
 8002f40:	6123      	str	r3, [r4, #16]
 8002f42:	2301      	movs	r3, #1
 8002f44:	6163      	str	r3, [r4, #20]
 8002f46:	b003      	add	sp, #12
 8002f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4a:	466a      	mov	r2, sp
 8002f4c:	ab01      	add	r3, sp, #4
 8002f4e:	f7ff ffc9 	bl	8002ee4 <__swhatbuf_r>
 8002f52:	9f00      	ldr	r7, [sp, #0]
 8002f54:	4605      	mov	r5, r0
 8002f56:	4639      	mov	r1, r7
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7ff f8c1 	bl	80020e0 <_malloc_r>
 8002f5e:	b948      	cbnz	r0, 8002f74 <__smakebuf_r+0x46>
 8002f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f64:	059a      	lsls	r2, r3, #22
 8002f66:	d4ee      	bmi.n	8002f46 <__smakebuf_r+0x18>
 8002f68:	f023 0303 	bic.w	r3, r3, #3
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	81a3      	strh	r3, [r4, #12]
 8002f72:	e7e2      	b.n	8002f3a <__smakebuf_r+0xc>
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f7e:	81a3      	strh	r3, [r4, #12]
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	6020      	str	r0, [r4, #0]
 8002f84:	b15b      	cbz	r3, 8002f9e <__smakebuf_r+0x70>
 8002f86:	4630      	mov	r0, r6
 8002f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f8c:	f000 f990 	bl	80032b0 <_isatty_r>
 8002f90:	b128      	cbz	r0, 8002f9e <__smakebuf_r+0x70>
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	431d      	orrs	r5, r3
 8002fa2:	81a5      	strh	r5, [r4, #12]
 8002fa4:	e7cf      	b.n	8002f46 <__smakebuf_r+0x18>
	...

08002fa8 <lflush>:
 8002fa8:	898b      	ldrh	r3, [r1, #12]
 8002faa:	f003 0309 	and.w	r3, r3, #9
 8002fae:	2b09      	cmp	r3, #9
 8002fb0:	d103      	bne.n	8002fba <lflush+0x12>
 8002fb2:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <lflush+0x18>)
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	f7ff bf6d 	b.w	8002e94 <_fflush_r>
 8002fba:	2000      	movs	r0, #0
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000020 	.word	0x20000020

08002fc4 <__srefill_r>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	4605      	mov	r5, r0
 8002fca:	b118      	cbz	r0, 8002fd4 <__srefill_r+0x10>
 8002fcc:	6a03      	ldr	r3, [r0, #32]
 8002fce:	b90b      	cbnz	r3, 8002fd4 <__srefill_r+0x10>
 8002fd0:	f7fe fe10 	bl	8001bf4 <__sinit>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6063      	str	r3, [r4, #4]
 8002fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fdc:	069e      	lsls	r6, r3, #26
 8002fde:	d408      	bmi.n	8002ff2 <__srefill_r+0x2e>
 8002fe0:	0758      	lsls	r0, r3, #29
 8002fe2:	d445      	bmi.n	8003070 <__srefill_r+0xac>
 8002fe4:	06d9      	lsls	r1, r3, #27
 8002fe6:	d407      	bmi.n	8002ff8 <__srefill_r+0x34>
 8002fe8:	2209      	movs	r2, #9
 8002fea:	602a      	str	r2, [r5, #0]
 8002fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ff0:	81a3      	strh	r3, [r4, #12]
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	071a      	lsls	r2, r3, #28
 8002ffa:	d50b      	bpl.n	8003014 <__srefill_r+0x50>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f7ff ff48 	bl	8002e94 <_fflush_r>
 8003004:	2800      	cmp	r0, #0
 8003006:	d1f4      	bne.n	8002ff2 <__srefill_r+0x2e>
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	60a0      	str	r0, [r4, #8]
 800300c:	f023 0308 	bic.w	r3, r3, #8
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	61a0      	str	r0, [r4, #24]
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	81a3      	strh	r3, [r4, #12]
 800301c:	6923      	ldr	r3, [r4, #16]
 800301e:	b91b      	cbnz	r3, 8003028 <__srefill_r+0x64>
 8003020:	4621      	mov	r1, r4
 8003022:	4628      	mov	r0, r5
 8003024:	f7ff ff83 	bl	8002f2e <__smakebuf_r>
 8003028:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800302c:	07b3      	lsls	r3, r6, #30
 800302e:	d00f      	beq.n	8003050 <__srefill_r+0x8c>
 8003030:	2301      	movs	r3, #1
 8003032:	4a1b      	ldr	r2, [pc, #108]	@ (80030a0 <__srefill_r+0xdc>)
 8003034:	491b      	ldr	r1, [pc, #108]	@ (80030a4 <__srefill_r+0xe0>)
 8003036:	481c      	ldr	r0, [pc, #112]	@ (80030a8 <__srefill_r+0xe4>)
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	f7fe fdf3 	bl	8001c24 <_fwalk_sglue>
 800303e:	81a6      	strh	r6, [r4, #12]
 8003040:	f006 0609 	and.w	r6, r6, #9
 8003044:	2e09      	cmp	r6, #9
 8003046:	d103      	bne.n	8003050 <__srefill_r+0x8c>
 8003048:	4621      	mov	r1, r4
 800304a:	4628      	mov	r0, r5
 800304c:	f7ff fea2 	bl	8002d94 <__sflush_r>
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	4628      	mov	r0, r5
 8003054:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003056:	6963      	ldr	r3, [r4, #20]
 8003058:	6a21      	ldr	r1, [r4, #32]
 800305a:	6022      	str	r2, [r4, #0]
 800305c:	47b0      	blx	r6
 800305e:	2800      	cmp	r0, #0
 8003060:	6060      	str	r0, [r4, #4]
 8003062:	dc17      	bgt.n	8003094 <__srefill_r+0xd0>
 8003064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003068:	d116      	bne.n	8003098 <__srefill_r+0xd4>
 800306a:	f043 0320 	orr.w	r3, r3, #32
 800306e:	e7bf      	b.n	8002ff0 <__srefill_r+0x2c>
 8003070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003072:	2900      	cmp	r1, #0
 8003074:	d0d2      	beq.n	800301c <__srefill_r+0x58>
 8003076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800307a:	4299      	cmp	r1, r3
 800307c:	d002      	beq.n	8003084 <__srefill_r+0xc0>
 800307e:	4628      	mov	r0, r5
 8003080:	f7fe ffc4 	bl	800200c <_free_r>
 8003084:	2300      	movs	r3, #0
 8003086:	6363      	str	r3, [r4, #52]	@ 0x34
 8003088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800308a:	6063      	str	r3, [r4, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0c5      	beq.n	800301c <__srefill_r+0x58>
 8003090:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	2000      	movs	r0, #0
 8003096:	e7ae      	b.n	8002ff6 <__srefill_r+0x32>
 8003098:	2200      	movs	r2, #0
 800309a:	6062      	str	r2, [r4, #4]
 800309c:	e7a6      	b.n	8002fec <__srefill_r+0x28>
 800309e:	bf00      	nop
 80030a0:	20000014 	.word	0x20000014
 80030a4:	08002fa9 	.word	0x08002fa9
 80030a8:	20000024 	.word	0x20000024

080030ac <__sccl>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	780b      	ldrb	r3, [r1, #0]
 80030b0:	4604      	mov	r4, r0
 80030b2:	2b5e      	cmp	r3, #94	@ 0x5e
 80030b4:	bf0b      	itete	eq
 80030b6:	784b      	ldrbeq	r3, [r1, #1]
 80030b8:	1c4a      	addne	r2, r1, #1
 80030ba:	1c8a      	addeq	r2, r1, #2
 80030bc:	2100      	movne	r1, #0
 80030be:	bf08      	it	eq
 80030c0:	2101      	moveq	r1, #1
 80030c2:	3801      	subs	r0, #1
 80030c4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80030c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80030cc:	42a8      	cmp	r0, r5
 80030ce:	d1fb      	bne.n	80030c8 <__sccl+0x1c>
 80030d0:	b90b      	cbnz	r3, 80030d6 <__sccl+0x2a>
 80030d2:	1e50      	subs	r0, r2, #1
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	f081 0101 	eor.w	r1, r1, #1
 80030da:	4610      	mov	r0, r2
 80030dc:	54e1      	strb	r1, [r4, r3]
 80030de:	4602      	mov	r2, r0
 80030e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80030e4:	2d2d      	cmp	r5, #45	@ 0x2d
 80030e6:	d005      	beq.n	80030f4 <__sccl+0x48>
 80030e8:	2d5d      	cmp	r5, #93	@ 0x5d
 80030ea:	d016      	beq.n	800311a <__sccl+0x6e>
 80030ec:	2d00      	cmp	r5, #0
 80030ee:	d0f1      	beq.n	80030d4 <__sccl+0x28>
 80030f0:	462b      	mov	r3, r5
 80030f2:	e7f2      	b.n	80030da <__sccl+0x2e>
 80030f4:	7846      	ldrb	r6, [r0, #1]
 80030f6:	2e5d      	cmp	r6, #93	@ 0x5d
 80030f8:	d0fa      	beq.n	80030f0 <__sccl+0x44>
 80030fa:	42b3      	cmp	r3, r6
 80030fc:	dcf8      	bgt.n	80030f0 <__sccl+0x44>
 80030fe:	461a      	mov	r2, r3
 8003100:	3002      	adds	r0, #2
 8003102:	3201      	adds	r2, #1
 8003104:	4296      	cmp	r6, r2
 8003106:	54a1      	strb	r1, [r4, r2]
 8003108:	dcfb      	bgt.n	8003102 <__sccl+0x56>
 800310a:	1af2      	subs	r2, r6, r3
 800310c:	3a01      	subs	r2, #1
 800310e:	42b3      	cmp	r3, r6
 8003110:	bfa8      	it	ge
 8003112:	2200      	movge	r2, #0
 8003114:	1c5d      	adds	r5, r3, #1
 8003116:	18ab      	adds	r3, r5, r2
 8003118:	e7e1      	b.n	80030de <__sccl+0x32>
 800311a:	4610      	mov	r0, r2
 800311c:	e7da      	b.n	80030d4 <__sccl+0x28>

0800311e <__submore>:
 800311e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003122:	460c      	mov	r4, r1
 8003124:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003126:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800312a:	4299      	cmp	r1, r3
 800312c:	d11b      	bne.n	8003166 <__submore+0x48>
 800312e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003132:	f7fe ffd5 	bl	80020e0 <_malloc_r>
 8003136:	b918      	cbnz	r0, 8003140 <__submore+0x22>
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003144:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003146:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800314a:	6360      	str	r0, [r4, #52]	@ 0x34
 800314c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003150:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003154:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003158:	7043      	strb	r3, [r0, #1]
 800315a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800315e:	7003      	strb	r3, [r0, #0]
 8003160:	6020      	str	r0, [r4, #0]
 8003162:	2000      	movs	r0, #0
 8003164:	e7ea      	b.n	800313c <__submore+0x1e>
 8003166:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003168:	0077      	lsls	r7, r6, #1
 800316a:	463a      	mov	r2, r7
 800316c:	f000 f8dc 	bl	8003328 <_realloc_r>
 8003170:	4605      	mov	r5, r0
 8003172:	2800      	cmp	r0, #0
 8003174:	d0e0      	beq.n	8003138 <__submore+0x1a>
 8003176:	eb00 0806 	add.w	r8, r0, r6
 800317a:	4601      	mov	r1, r0
 800317c:	4632      	mov	r2, r6
 800317e:	4640      	mov	r0, r8
 8003180:	f000 f8c4 	bl	800330c <memcpy>
 8003184:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003188:	f8c4 8000 	str.w	r8, [r4]
 800318c:	e7e9      	b.n	8003162 <__submore+0x44>

0800318e <_ungetc_r>:
 800318e:	b570      	push	{r4, r5, r6, lr}
 8003190:	460d      	mov	r5, r1
 8003192:	1c69      	adds	r1, r5, #1
 8003194:	4606      	mov	r6, r0
 8003196:	4614      	mov	r4, r2
 8003198:	d01e      	beq.n	80031d8 <_ungetc_r+0x4a>
 800319a:	b118      	cbz	r0, 80031a4 <_ungetc_r+0x16>
 800319c:	6a03      	ldr	r3, [r0, #32]
 800319e:	b90b      	cbnz	r3, 80031a4 <_ungetc_r+0x16>
 80031a0:	f7fe fd28 	bl	8001bf4 <__sinit>
 80031a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031a6:	07da      	lsls	r2, r3, #31
 80031a8:	d405      	bmi.n	80031b6 <_ungetc_r+0x28>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	059b      	lsls	r3, r3, #22
 80031ae:	d402      	bmi.n	80031b6 <_ungetc_r+0x28>
 80031b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031b2:	f7fe ff28 	bl	8002006 <__retarget_lock_acquire_recursive>
 80031b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ba:	f023 0220 	bic.w	r2, r3, #32
 80031be:	0758      	lsls	r0, r3, #29
 80031c0:	81a2      	strh	r2, [r4, #12]
 80031c2:	d422      	bmi.n	800320a <_ungetc_r+0x7c>
 80031c4:	06d9      	lsls	r1, r3, #27
 80031c6:	d40a      	bmi.n	80031de <_ungetc_r+0x50>
 80031c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80031ca:	07d2      	lsls	r2, r2, #31
 80031cc:	d404      	bmi.n	80031d8 <_ungetc_r+0x4a>
 80031ce:	0599      	lsls	r1, r3, #22
 80031d0:	d402      	bmi.n	80031d8 <_ungetc_r+0x4a>
 80031d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031d4:	f7fe ff18 	bl	8002008 <__retarget_lock_release_recursive>
 80031d8:	f04f 35ff 	mov.w	r5, #4294967295
 80031dc:	e046      	b.n	800326c <_ungetc_r+0xde>
 80031de:	071b      	lsls	r3, r3, #28
 80031e0:	d50f      	bpl.n	8003202 <_ungetc_r+0x74>
 80031e2:	4621      	mov	r1, r4
 80031e4:	4630      	mov	r0, r6
 80031e6:	f7ff fe55 	bl	8002e94 <_fflush_r>
 80031ea:	b120      	cbz	r0, 80031f6 <_ungetc_r+0x68>
 80031ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031ee:	07d8      	lsls	r0, r3, #31
 80031f0:	d4f2      	bmi.n	80031d8 <_ungetc_r+0x4a>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	e7eb      	b.n	80031ce <_ungetc_r+0x40>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	60a0      	str	r0, [r4, #8]
 80031fa:	f023 0308 	bic.w	r3, r3, #8
 80031fe:	81a3      	strh	r3, [r4, #12]
 8003200:	61a0      	str	r0, [r4, #24]
 8003202:	89a3      	ldrh	r3, [r4, #12]
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	81a3      	strh	r3, [r4, #12]
 800320a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800320c:	6862      	ldr	r2, [r4, #4]
 800320e:	b2ed      	uxtb	r5, r5
 8003210:	b1d3      	cbz	r3, 8003248 <_ungetc_r+0xba>
 8003212:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003214:	4293      	cmp	r3, r2
 8003216:	dc05      	bgt.n	8003224 <_ungetc_r+0x96>
 8003218:	4621      	mov	r1, r4
 800321a:	4630      	mov	r0, r6
 800321c:	f7ff ff7f 	bl	800311e <__submore>
 8003220:	2800      	cmp	r0, #0
 8003222:	d1e3      	bne.n	80031ec <_ungetc_r+0x5e>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	1e5a      	subs	r2, r3, #1
 8003228:	6022      	str	r2, [r4, #0]
 800322a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	3301      	adds	r3, #1
 8003232:	6063      	str	r3, [r4, #4]
 8003234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003236:	07da      	lsls	r2, r3, #31
 8003238:	d418      	bmi.n	800326c <_ungetc_r+0xde>
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	059b      	lsls	r3, r3, #22
 800323e:	d415      	bmi.n	800326c <_ungetc_r+0xde>
 8003240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003242:	f7fe fee1 	bl	8002008 <__retarget_lock_release_recursive>
 8003246:	e011      	b.n	800326c <_ungetc_r+0xde>
 8003248:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800324a:	6920      	ldr	r0, [r4, #16]
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f001 0101 	and.w	r1, r1, #1
 8003252:	b168      	cbz	r0, 8003270 <_ungetc_r+0xe2>
 8003254:	4298      	cmp	r0, r3
 8003256:	d20b      	bcs.n	8003270 <_ungetc_r+0xe2>
 8003258:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800325c:	42a8      	cmp	r0, r5
 800325e:	d107      	bne.n	8003270 <_ungetc_r+0xe2>
 8003260:	3b01      	subs	r3, #1
 8003262:	3201      	adds	r2, #1
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	6062      	str	r2, [r4, #4]
 8003268:	2900      	cmp	r1, #0
 800326a:	d0e6      	beq.n	800323a <_ungetc_r+0xac>
 800326c:	4628      	mov	r0, r5
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8003274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003278:	6363      	str	r3, [r4, #52]	@ 0x34
 800327a:	2303      	movs	r3, #3
 800327c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800327e:	4623      	mov	r3, r4
 8003280:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	2301      	movs	r3, #1
 8003288:	6063      	str	r3, [r4, #4]
 800328a:	e7ed      	b.n	8003268 <_ungetc_r+0xda>

0800328c <_fstat_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	2300      	movs	r3, #0
 8003290:	4d06      	ldr	r5, [pc, #24]	@ (80032ac <_fstat_r+0x20>)
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	f7fe fa9e 	bl	80017da <_fstat>
 800329e:	1c43      	adds	r3, r0, #1
 80032a0:	d102      	bne.n	80032a8 <_fstat_r+0x1c>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	b103      	cbz	r3, 80032a8 <_fstat_r+0x1c>
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	bd38      	pop	{r3, r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	200002c4 	.word	0x200002c4

080032b0 <_isatty_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	2300      	movs	r3, #0
 80032b4:	4d05      	ldr	r5, [pc, #20]	@ (80032cc <_isatty_r+0x1c>)
 80032b6:	4604      	mov	r4, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	602b      	str	r3, [r5, #0]
 80032bc:	f7fe fbf0 	bl	8001aa0 <_isatty>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d102      	bne.n	80032ca <_isatty_r+0x1a>
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	b103      	cbz	r3, 80032ca <_isatty_r+0x1a>
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	200002c4 	.word	0x200002c4

080032d0 <_sbrk_r>:
 80032d0:	b538      	push	{r3, r4, r5, lr}
 80032d2:	2300      	movs	r3, #0
 80032d4:	4d05      	ldr	r5, [pc, #20]	@ (80032ec <_sbrk_r+0x1c>)
 80032d6:	4604      	mov	r4, r0
 80032d8:	4608      	mov	r0, r1
 80032da:	602b      	str	r3, [r5, #0]
 80032dc:	f7fd f8ea 	bl	80004b4 <_sbrk>
 80032e0:	1c43      	adds	r3, r0, #1
 80032e2:	d102      	bne.n	80032ea <_sbrk_r+0x1a>
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	b103      	cbz	r3, 80032ea <_sbrk_r+0x1a>
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	bd38      	pop	{r3, r4, r5, pc}
 80032ec:	200002c4 	.word	0x200002c4

080032f0 <memchr>:
 80032f0:	4603      	mov	r3, r0
 80032f2:	b510      	push	{r4, lr}
 80032f4:	b2c9      	uxtb	r1, r1
 80032f6:	4402      	add	r2, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	d101      	bne.n	8003302 <memchr+0x12>
 80032fe:	2000      	movs	r0, #0
 8003300:	e003      	b.n	800330a <memchr+0x1a>
 8003302:	7804      	ldrb	r4, [r0, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	428c      	cmp	r4, r1
 8003308:	d1f6      	bne.n	80032f8 <memchr+0x8>
 800330a:	bd10      	pop	{r4, pc}

0800330c <memcpy>:
 800330c:	440a      	add	r2, r1
 800330e:	4291      	cmp	r1, r2
 8003310:	f100 33ff 	add.w	r3, r0, #4294967295
 8003314:	d100      	bne.n	8003318 <memcpy+0xc>
 8003316:	4770      	bx	lr
 8003318:	b510      	push	{r4, lr}
 800331a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800331e:	4291      	cmp	r1, r2
 8003320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003324:	d1f9      	bne.n	800331a <memcpy+0xe>
 8003326:	bd10      	pop	{r4, pc}

08003328 <_realloc_r>:
 8003328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332c:	4680      	mov	r8, r0
 800332e:	4615      	mov	r5, r2
 8003330:	460c      	mov	r4, r1
 8003332:	b921      	cbnz	r1, 800333e <_realloc_r+0x16>
 8003334:	4611      	mov	r1, r2
 8003336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800333a:	f7fe bed1 	b.w	80020e0 <_malloc_r>
 800333e:	b92a      	cbnz	r2, 800334c <_realloc_r+0x24>
 8003340:	f7fe fe64 	bl	800200c <_free_r>
 8003344:	2400      	movs	r4, #0
 8003346:	4620      	mov	r0, r4
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334c:	f000 f906 	bl	800355c <_malloc_usable_size_r>
 8003350:	4285      	cmp	r5, r0
 8003352:	4606      	mov	r6, r0
 8003354:	d802      	bhi.n	800335c <_realloc_r+0x34>
 8003356:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800335a:	d8f4      	bhi.n	8003346 <_realloc_r+0x1e>
 800335c:	4629      	mov	r1, r5
 800335e:	4640      	mov	r0, r8
 8003360:	f7fe febe 	bl	80020e0 <_malloc_r>
 8003364:	4607      	mov	r7, r0
 8003366:	2800      	cmp	r0, #0
 8003368:	d0ec      	beq.n	8003344 <_realloc_r+0x1c>
 800336a:	42b5      	cmp	r5, r6
 800336c:	462a      	mov	r2, r5
 800336e:	4621      	mov	r1, r4
 8003370:	bf28      	it	cs
 8003372:	4632      	movcs	r2, r6
 8003374:	f7ff ffca 	bl	800330c <memcpy>
 8003378:	4621      	mov	r1, r4
 800337a:	4640      	mov	r0, r8
 800337c:	f7fe fe46 	bl	800200c <_free_r>
 8003380:	463c      	mov	r4, r7
 8003382:	e7e0      	b.n	8003346 <_realloc_r+0x1e>

08003384 <_strtol_l.constprop.0>:
 8003384:	2b24      	cmp	r3, #36	@ 0x24
 8003386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338a:	4686      	mov	lr, r0
 800338c:	4690      	mov	r8, r2
 800338e:	d801      	bhi.n	8003394 <_strtol_l.constprop.0+0x10>
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <_strtol_l.constprop.0+0x1e>
 8003394:	f7fe fe0c 	bl	8001fb0 <__errno>
 8003398:	2316      	movs	r3, #22
 800339a:	6003      	str	r3, [r0, #0]
 800339c:	2000      	movs	r0, #0
 800339e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a2:	460d      	mov	r5, r1
 80033a4:	4833      	ldr	r0, [pc, #204]	@ (8003474 <_strtol_l.constprop.0+0xf0>)
 80033a6:	462a      	mov	r2, r5
 80033a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033ac:	5d06      	ldrb	r6, [r0, r4]
 80033ae:	f016 0608 	ands.w	r6, r6, #8
 80033b2:	d1f8      	bne.n	80033a6 <_strtol_l.constprop.0+0x22>
 80033b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80033b6:	d12d      	bne.n	8003414 <_strtol_l.constprop.0+0x90>
 80033b8:	2601      	movs	r6, #1
 80033ba:	782c      	ldrb	r4, [r5, #0]
 80033bc:	1c95      	adds	r5, r2, #2
 80033be:	f033 0210 	bics.w	r2, r3, #16
 80033c2:	d109      	bne.n	80033d8 <_strtol_l.constprop.0+0x54>
 80033c4:	2c30      	cmp	r4, #48	@ 0x30
 80033c6:	d12a      	bne.n	800341e <_strtol_l.constprop.0+0x9a>
 80033c8:	782a      	ldrb	r2, [r5, #0]
 80033ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80033ce:	2a58      	cmp	r2, #88	@ 0x58
 80033d0:	d125      	bne.n	800341e <_strtol_l.constprop.0+0x9a>
 80033d2:	2310      	movs	r3, #16
 80033d4:	786c      	ldrb	r4, [r5, #1]
 80033d6:	3502      	adds	r5, #2
 80033d8:	2200      	movs	r2, #0
 80033da:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80033de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80033e2:	fbbc f9f3 	udiv	r9, ip, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80033ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80033f0:	2f09      	cmp	r7, #9
 80033f2:	d81b      	bhi.n	800342c <_strtol_l.constprop.0+0xa8>
 80033f4:	463c      	mov	r4, r7
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	dd27      	ble.n	800344a <_strtol_l.constprop.0+0xc6>
 80033fa:	1c57      	adds	r7, r2, #1
 80033fc:	d007      	beq.n	800340e <_strtol_l.constprop.0+0x8a>
 80033fe:	4581      	cmp	r9, r0
 8003400:	d320      	bcc.n	8003444 <_strtol_l.constprop.0+0xc0>
 8003402:	d101      	bne.n	8003408 <_strtol_l.constprop.0+0x84>
 8003404:	45a2      	cmp	sl, r4
 8003406:	db1d      	blt.n	8003444 <_strtol_l.constprop.0+0xc0>
 8003408:	2201      	movs	r2, #1
 800340a:	fb00 4003 	mla	r0, r0, r3, r4
 800340e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003412:	e7eb      	b.n	80033ec <_strtol_l.constprop.0+0x68>
 8003414:	2c2b      	cmp	r4, #43	@ 0x2b
 8003416:	bf04      	itt	eq
 8003418:	782c      	ldrbeq	r4, [r5, #0]
 800341a:	1c95      	addeq	r5, r2, #2
 800341c:	e7cf      	b.n	80033be <_strtol_l.constprop.0+0x3a>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1da      	bne.n	80033d8 <_strtol_l.constprop.0+0x54>
 8003422:	2c30      	cmp	r4, #48	@ 0x30
 8003424:	bf0c      	ite	eq
 8003426:	2308      	moveq	r3, #8
 8003428:	230a      	movne	r3, #10
 800342a:	e7d5      	b.n	80033d8 <_strtol_l.constprop.0+0x54>
 800342c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003430:	2f19      	cmp	r7, #25
 8003432:	d801      	bhi.n	8003438 <_strtol_l.constprop.0+0xb4>
 8003434:	3c37      	subs	r4, #55	@ 0x37
 8003436:	e7de      	b.n	80033f6 <_strtol_l.constprop.0+0x72>
 8003438:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800343c:	2f19      	cmp	r7, #25
 800343e:	d804      	bhi.n	800344a <_strtol_l.constprop.0+0xc6>
 8003440:	3c57      	subs	r4, #87	@ 0x57
 8003442:	e7d8      	b.n	80033f6 <_strtol_l.constprop.0+0x72>
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
 8003448:	e7e1      	b.n	800340e <_strtol_l.constprop.0+0x8a>
 800344a:	1c53      	adds	r3, r2, #1
 800344c:	d108      	bne.n	8003460 <_strtol_l.constprop.0+0xdc>
 800344e:	2322      	movs	r3, #34	@ 0x22
 8003450:	4660      	mov	r0, ip
 8003452:	f8ce 3000 	str.w	r3, [lr]
 8003456:	f1b8 0f00 	cmp.w	r8, #0
 800345a:	d0a0      	beq.n	800339e <_strtol_l.constprop.0+0x1a>
 800345c:	1e69      	subs	r1, r5, #1
 800345e:	e006      	b.n	800346e <_strtol_l.constprop.0+0xea>
 8003460:	b106      	cbz	r6, 8003464 <_strtol_l.constprop.0+0xe0>
 8003462:	4240      	negs	r0, r0
 8003464:	f1b8 0f00 	cmp.w	r8, #0
 8003468:	d099      	beq.n	800339e <_strtol_l.constprop.0+0x1a>
 800346a:	2a00      	cmp	r2, #0
 800346c:	d1f6      	bne.n	800345c <_strtol_l.constprop.0+0xd8>
 800346e:	f8c8 1000 	str.w	r1, [r8]
 8003472:	e794      	b.n	800339e <_strtol_l.constprop.0+0x1a>
 8003474:	0800365f 	.word	0x0800365f

08003478 <_strtol_r>:
 8003478:	f7ff bf84 	b.w	8003384 <_strtol_l.constprop.0>

0800347c <_strtoul_l.constprop.0>:
 800347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003480:	4686      	mov	lr, r0
 8003482:	460d      	mov	r5, r1
 8003484:	4e33      	ldr	r6, [pc, #204]	@ (8003554 <_strtoul_l.constprop.0+0xd8>)
 8003486:	4628      	mov	r0, r5
 8003488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800348c:	5d37      	ldrb	r7, [r6, r4]
 800348e:	f017 0708 	ands.w	r7, r7, #8
 8003492:	d1f8      	bne.n	8003486 <_strtoul_l.constprop.0+0xa>
 8003494:	2c2d      	cmp	r4, #45	@ 0x2d
 8003496:	d12f      	bne.n	80034f8 <_strtoul_l.constprop.0+0x7c>
 8003498:	2701      	movs	r7, #1
 800349a:	782c      	ldrb	r4, [r5, #0]
 800349c:	1c85      	adds	r5, r0, #2
 800349e:	f033 0010 	bics.w	r0, r3, #16
 80034a2:	d109      	bne.n	80034b8 <_strtoul_l.constprop.0+0x3c>
 80034a4:	2c30      	cmp	r4, #48	@ 0x30
 80034a6:	d12c      	bne.n	8003502 <_strtoul_l.constprop.0+0x86>
 80034a8:	7828      	ldrb	r0, [r5, #0]
 80034aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80034ae:	2858      	cmp	r0, #88	@ 0x58
 80034b0:	d127      	bne.n	8003502 <_strtoul_l.constprop.0+0x86>
 80034b2:	2310      	movs	r3, #16
 80034b4:	786c      	ldrb	r4, [r5, #1]
 80034b6:	3502      	adds	r5, #2
 80034b8:	f04f 38ff 	mov.w	r8, #4294967295
 80034bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80034c0:	2600      	movs	r6, #0
 80034c2:	fb03 f908 	mul.w	r9, r3, r8
 80034c6:	4630      	mov	r0, r6
 80034c8:	ea6f 0909 	mvn.w	r9, r9
 80034cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80034d0:	f1bc 0f09 	cmp.w	ip, #9
 80034d4:	d81c      	bhi.n	8003510 <_strtoul_l.constprop.0+0x94>
 80034d6:	4664      	mov	r4, ip
 80034d8:	42a3      	cmp	r3, r4
 80034da:	dd2a      	ble.n	8003532 <_strtoul_l.constprop.0+0xb6>
 80034dc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80034e0:	d007      	beq.n	80034f2 <_strtoul_l.constprop.0+0x76>
 80034e2:	4580      	cmp	r8, r0
 80034e4:	d322      	bcc.n	800352c <_strtoul_l.constprop.0+0xb0>
 80034e6:	d101      	bne.n	80034ec <_strtoul_l.constprop.0+0x70>
 80034e8:	45a1      	cmp	r9, r4
 80034ea:	db1f      	blt.n	800352c <_strtoul_l.constprop.0+0xb0>
 80034ec:	2601      	movs	r6, #1
 80034ee:	fb00 4003 	mla	r0, r0, r3, r4
 80034f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034f6:	e7e9      	b.n	80034cc <_strtoul_l.constprop.0+0x50>
 80034f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80034fa:	bf04      	itt	eq
 80034fc:	782c      	ldrbeq	r4, [r5, #0]
 80034fe:	1c85      	addeq	r5, r0, #2
 8003500:	e7cd      	b.n	800349e <_strtoul_l.constprop.0+0x22>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1d8      	bne.n	80034b8 <_strtoul_l.constprop.0+0x3c>
 8003506:	2c30      	cmp	r4, #48	@ 0x30
 8003508:	bf0c      	ite	eq
 800350a:	2308      	moveq	r3, #8
 800350c:	230a      	movne	r3, #10
 800350e:	e7d3      	b.n	80034b8 <_strtoul_l.constprop.0+0x3c>
 8003510:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003514:	f1bc 0f19 	cmp.w	ip, #25
 8003518:	d801      	bhi.n	800351e <_strtoul_l.constprop.0+0xa2>
 800351a:	3c37      	subs	r4, #55	@ 0x37
 800351c:	e7dc      	b.n	80034d8 <_strtoul_l.constprop.0+0x5c>
 800351e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003522:	f1bc 0f19 	cmp.w	ip, #25
 8003526:	d804      	bhi.n	8003532 <_strtoul_l.constprop.0+0xb6>
 8003528:	3c57      	subs	r4, #87	@ 0x57
 800352a:	e7d5      	b.n	80034d8 <_strtoul_l.constprop.0+0x5c>
 800352c:	f04f 36ff 	mov.w	r6, #4294967295
 8003530:	e7df      	b.n	80034f2 <_strtoul_l.constprop.0+0x76>
 8003532:	1c73      	adds	r3, r6, #1
 8003534:	d106      	bne.n	8003544 <_strtoul_l.constprop.0+0xc8>
 8003536:	2322      	movs	r3, #34	@ 0x22
 8003538:	4630      	mov	r0, r6
 800353a:	f8ce 3000 	str.w	r3, [lr]
 800353e:	b932      	cbnz	r2, 800354e <_strtoul_l.constprop.0+0xd2>
 8003540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003544:	b107      	cbz	r7, 8003548 <_strtoul_l.constprop.0+0xcc>
 8003546:	4240      	negs	r0, r0
 8003548:	2a00      	cmp	r2, #0
 800354a:	d0f9      	beq.n	8003540 <_strtoul_l.constprop.0+0xc4>
 800354c:	b106      	cbz	r6, 8003550 <_strtoul_l.constprop.0+0xd4>
 800354e:	1e69      	subs	r1, r5, #1
 8003550:	6011      	str	r1, [r2, #0]
 8003552:	e7f5      	b.n	8003540 <_strtoul_l.constprop.0+0xc4>
 8003554:	0800365f 	.word	0x0800365f

08003558 <_strtoul_r>:
 8003558:	f7ff bf90 	b.w	800347c <_strtoul_l.constprop.0>

0800355c <_malloc_usable_size_r>:
 800355c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003560:	1f18      	subs	r0, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfbc      	itt	lt
 8003566:	580b      	ldrlt	r3, [r1, r0]
 8003568:	18c0      	addlt	r0, r0, r3
 800356a:	4770      	bx	lr

0800356c <_init>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr

08003578 <_fini>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr
